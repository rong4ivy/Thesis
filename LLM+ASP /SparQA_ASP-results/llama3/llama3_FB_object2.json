[
  {
    "context": "There is a block called A. Inside there's a red oval that is above a blue triangle. The blue triangle is touching the right edge of A and the top of a large black square. Touching the bottom edge of A is  a small orange square. The is a block called B Which is to the right and touching A. Inside B there are 5 triangles, a red one, a green one, a large yellow one, a brown one, and an orange one. The red and orange triangles are touching the left edge of B and the orange triangle is above the red triangle. The large yellow triangle is touching the top edge of B. The green triangle is touching the right edge of B. The brown triangle is below all of the other triangles and is touching the bottom of B.",
    "question": "Which block has the blue triangle?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b). object(red_oval, a). object(blue_triangle, a). object(large_black_square, a). object(small_orange_square, a). object(red_triangle, b). object(orange_triangle, b). object(large_yellow_triangle, b). object(green_triangle, b). object(brown_triangle, b). is(red_oval, above, blue_triangle). is(blue_triangle, touching, right_edge_a). is(blue_triangle, above, large_black_square). is(small_orange_square, touching, bottom_edge_a). is(red_triangle, touching, left_edge_b). is(orange_triangle, above, red_triangle). is(large_yellow_triangle, touching, top_edge_b). is(green_triangle, touching, right_edge_b). is(brown_triangle, below, red_triangle). is(brown_triangle, below, orange_triangle). is(brown_triangle, below, large_yellow_triangle). is(brown_triangle, below, green_triangle). is(brown_triangle, touching, bottom_edge_b). is(a, left, b). is(a, touching, b). is(red_triangle, left, orange_triangle). is(red_triangle, left, large_yellow_triangle). is(red_triangle, left, green_triangle). is(red_triangle, left, brown_triangle). is(orange_triangle, left, large_yellow_triangle). is(orange_triangle, left, green_triangle). is(orange_triangle, left, brown_triangle). is(large_yellow_triangle, left, green_triangle). is(large_yellow_triangle, left, brown_triangle). is(green_triangle, left, brown_triangle). is(red_oval, above, large_black_square). is(red_oval, above, small_orange_square). is(blue_triangle, above, large_black_square). is(blue_triangle, above, small_orange_square). is(red_triangle, above, brown_triangle). is(orange_triangle, above, brown_triangle). is(large_yellow_triangle, above, brown_triangle). is(green_triangle, above, brown_triangle). is(red_triangle, above, green_triangle). is(orange_triangle, above, green_triangle). is(large_yellow_triangle, above, green_triangle). is(red_triangle, above, large_yellow_triangle). is(orange_triangle, above, large_yellow_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red_triangle, above, red_triangle). is(red_triangle, above, orange_triangle). is(red_triangle, above, large_yellow_triangle). is(red_triangle, above, green_triangle). is(red_triangle, above, brown_triangle). is(red\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['A']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks called A, B, and C. B is to the right of and touching the right edge of A and C is above and touching the top of B. In A, there is a blue square touching the left edge of A. A red triangle is next to the blue square and is above a yellow circle is touching the bottom edge of A. In B, there is a purple rectangle and an orange oval. The orange oval is touching the right edge of B and the rectangle is near and to the left of and the oval. In C, there is a small triangle a large triangle and a pink triangle. The small triangle is above the large triangle and is touching the top of C. The pink triangle is touching the bottom of C, with the large triangle to the right of the pink triangle.",
    "question": "Which block has the thing that is above every other object?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(blue_square, a). object(red_triangle, a). object(yellow_circle, a). object(purple_rectangle, b). object(orange_oval, b). object(small_triangle, c). object(large_triangle, c). object(pink_triangle, c). is(blue_square, touching, left_edge_a). is(red_triangle, next_to, blue_square). is(red_triangle, above, yellow_circle). is(yellow_circle, touching, bottom_edge_a). is(purple_rectangle, near, orange_oval). is(purple_rectangle, left, orange_oval). is(orange_oval, touching, right_edge_b). is(small_triangle, touching, top_edge_c). is(small_triangle, above, large_triangle). is(pink_triangle, touching, bottom_edge_c). is(large_triangle, right, pink_triangle). is(b, right, a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edge_b). is(b, touching, right_edge_a). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b, touching, right_edgea). is(c, above, b). is(c, touching, top_edgeb). is(b,\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['C']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks called A, B, and C. B is to the right of and touching the right edge of A and C is above and touching the top of B. In A, there is a blue square touching the left edge of A. A red triangle is next to the blue square and is above a yellow circle is touching the bottom edge of A. In B, there is a purple rectangle and an orange oval. The orange oval is touching the right edge of B and the rectangle is near and to the left of and the oval. In C, there is a small triangle a large triangle and a pink triangle. The small triangle is above the large triangle and is touching the top of C. The pink triangle is touching the bottom of C, with the large triangle to the right of the pink triangle.",
    "question": "Which block has the thing that is below and the red object?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(blue_square, a). object(red_triangle, a). object(yellow_circle, a). object(purple_rectangle, b). object(orange_oval, b). object(small_triangle, c). object(large_triangle, c). object(pink_triangle, c). is(blue_square, touching, left_edge_a). is(red_triangle, next_to, blue_square). is(yellow_circle, touching, bottom_edge_a). is(red_triangle, above, yellow_circle). is(purple_rectangle, near, orange_oval). is(purple_rectangle, left, orange_oval). is(orange_oval, touching, right_edge_b). is(small_triangle, touching, top_c). is(small_triangle, above, large_triangle). is(pink_triangle, touching, bottom_c). is(large_triangle, right, pink_triangle).\n\nQuery: query(Answer) :- object(Answer, Block), object(red_triangle, Block), is(red_triangle, below, Answer). #show query/1.\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['A']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are two blocks called A and B. A is to the right of B. In A, there is a blue triangle, Which is above a orange rectangle, Which is above a black circle. The black circle is touching the bottom of A. In B there are four squares. A yellow square is above a white square and to the left of a green square. A large purple square is touching the bottom of B and is to the left and near of the white square. The green square is on top of the purple square.",
    "question": "What block does not have a orange thing inside?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b).\n\nobject(blue_triangle, a).\nobject(orange_rectangle, a).\nobject(black_circle, a).\n\nobject(yellow_square, b).\nobject(white_square, b).\nobject(green_square, b).\nobject(large_purple_square, b).\n\nis(blue_triangle, above, orange_rectangle).\nis(orange_rectangle, above, black_circle).\nis(black_circle, touching, bottom_a).\n\nis(yellow_square, above, white_square).\nis(yellow_square, left, green_square).\nis(white_square, near, large_purple_square).\nis(white_square, above, large_purple_square).\nis(green_square, above, large_purple_square).\n\nis(a, right, b).\n\nquery(Answer) :- object(OrangeObject, Block), Block = a; Block = b, OrangeObject = orange_rectangle.\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['B']",
    "asp_result": "Error: grounding stopped because of errors"
  },
  {
    "context": "There is a block called A. In A, there are four circles that are touching the bottom of A. The red circle is touching and to the left of the yellow circle. The pink circle is touching and to the right of the green circle. The yellow circle is touching and to the left of the green circle. Touching the bottom of A is a block called B. In B, there is a blue rectangle touching the top and the left of B. Near and to the right of the blue rectangle is a purple rectangle that is also touching the top of B. At the bottom of B there is a white triangle. Far to the left of B there is a block called C. In C, there is a brown oval that is to the right of an  orange square.",
    "question": "What block does not have a triangle inside?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(red_circle, a). object(yellow_circle, a). object(pink_circle, a). object(green_circle, a). object(blue_rectangle, b). object(purple_rectangle, b). object(white_triangle, b). object(brown_oval, c). object(orange_square, c). is(red_circle, touching, bottom_a). is(yellow_circle, touching, bottom_a). is(pink_circle, touching, bottom_a). is(green_circle, touching, bottom_a). is(red_circle, left, yellow_circle). is(yellow_circle, left, green_circle). is(pink_circle, right, green_circle). is(blue_rectangle, top, b). is(purple_rectangle, top, b). is(white_triangle, bottom, b). is(brown_oval, right, orange_square). is(a, top, b). is(b, top, c). is(c, left, b).\n\nQuery: query(Block) :- block(Block), not object(white_triangle, Block). #show query/1.\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['A', 'C']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There is a block named A. In A, there is a pink triangle that touches the bottom of A. There is also a white triangle that touches the left edge of A, a red triangle that touches the top of A, and a green triangle that touches the right edge of A. Below A there is a block called B. In B, there is a small square, a large square, and a yellow circle. The large square is to the right of and near the yellow circle. The yellow circe is to the right of and above the small square. Below B there is a blocked named C. In C, there is a brown oval that is on top of a blue rectangle.",
    "question": "Which block does not have a red object?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(pink_triangle, a). object(white_triangle, a). object(red_triangle, a). object(green_triangle, a). object(small_square, b). object(large_square, b). object(yellow_circle, b). object(brown_oval, c). object(blue_rectangle, c). is(pink_triangle, touching, bottom_edge_a). is(white_triangle, touching, left_edge_a). is(red_triangle, touching, top_edge_a). is(green_triangle, touching, right_edge_a). is(large_square, right, yellow_circle). is(yellow_circle, right, small_square). is(yellow_circle, above, small_square). is(brown_oval, above, blue_rectangle).\n\nQuery: query(Block) :- block(Block), not object(red_object, Block), red_object = red_triangle.\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['B', 'C']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks names A, B, and C. A is to the left of B and B is to the left of C. In A, there is a small square Which is below and to the left of a yellow circle. In B, there is a yellow circle above and to the right of a large blue square. In C, there is a small black square that is below a small yellow triangle. Near and to the right of the square is a large black triangle. The large triangle is also to the left of and near a large blue square. Far above the blue square is a small yellow circle. The small triangle is to the left and far from the small circle.",
    "question": "What block is to the right of B?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(small_square, a). object(yellow_circle, a). object(large_blue_square, b). object(yellow_circle, b). object(small_black_square, c). object(small_yellow_triangle, c). object(large_black_triangle, c). object(large_blue_square, c). object(small_yellow_circle, c). is(small_square, below, yellow_circle). is(small_square, left, yellow_circle). is(yellow_circle, above, large_blue_square). is(yellow_circle, right, large_blue_square). is(small_black_square, below, small_yellow_triangle). is(small_yellow_circle, above, large_blue_square). is(small_yellow_circle, far, small_yellow_triangle). is(large_black_triangle, left, large_blue_square). is(large_black_triangle, near, large_blue_square). is(a, left, b). is(b, left, c). is(b, right, a). is(c, right, b).\n\nQuery: query(RightBlock) :- is(b, right, RightBlock).\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['B']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks names A, B, and C. A is to the left of B and B is to the left of C. In A, there is a small square Which is below and to the left of a yellow circle. In B, there is a yellow circle above and to the right of a large blue square. In C, there is a small black square that is below a small yellow triangle. Near and to the right of the square is a large black triangle. The large triangle is also to the left of and near a large blue square. Far above the blue square is a small yellow circle. The small triangle is to the left and far from the small circle.",
    "question": "What block does not have a black object inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(small_square, a). object(yellow_circle, a). object(large_blue_square, b). object(yellow_circle, b). object(small_black_square, c). object(small_yellow_triangle, c). object(large_black_triangle, c). object(large_blue_square, c). object(small_yellow_circle, c). is(small_square, below, yellow_circle). is(small_square, left, yellow_circle). is(yellow_circle, above, large_blue_square). is(yellow_circle, right, large_blue_square). is(small_black_square, below, small_yellow_triangle). is(small_yellow_triangle, left, small_yellow_circle). is(small_yellow_circle, far, small_yellow_triangle). is(large_black_triangle, near, small_yellow_circle). is(large_blue_square, far, small_yellow_circle). is(large_black_triangle, left, large_blue_square). is(large_black_triangle, near, large_blue_square).\n\nQuery: query(NoBlackObjectBlock) :- block(NoBlackObjectBlock), not object(_, NoBlackObjectBlock), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _),\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['A', 'B']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks named A, B, and C. B is to the right of A and C is to the right of B. In A there is a large black square that is touching left edge of A. In B, there is a large blue square Which is near and to the right of a large blue triangle. Far below the triangle there is a large yellow circle. The large yellow circle is touching the bottom of B. In C, there is a small blue circle that is to the right of a small black triangle.",
    "question": "What block does not have a circle inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(large_black_square, a). object(large_blue_square, b). object(large_blue_triangle, b). object(large_yellow_circle, b). object(small_blue_circle, c). object(small_black_triangle, c). is(large_yellow_circle, touching, bottom_b). is(large_blue_square, near, large_blue_triangle). is(large_blue_square, right, large_blue_triangle). is(small_blue_circle, right, small_black_triangle). is(a, left, b). is(b, left, c). is(large_black_square, touching, left_edge_a). is(large_yellow_circle, below, large_blue_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black_triangle). is(small_blue_circle, right, small_black\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['A']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There is a block called A. In A, there are four blue circles: two small ones, a medium one, and a large one. The two small circles are below the large circle. The medium circle is far above and to the left of the large circle. There is another block called B, Which is to the right of A. In B, there is a blue triangle near the right edge of B. There is another block called C, Which is to the right of B. In C, there is a yellow circle, a large yellow triangle, and a black square. The yellow circle is near and to the left of the yellow triangle. The black square is to the right and below the yellow triangle.",
    "question": "What block does not have a blue object inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(small_blue_circle_1, a). object(small_blue_circle_2, a). object(medium_blue_circle, a). object(large_blue_circle, a). object(blue_triangle, b). object(yellow_circle, c). object(yellow_triangle, c). object(black_square, c). is(small_blue_circle_1, below, large_blue_circle). is(small_blue_circle_2, below, large_blue_circle). is(medium_blue_circle, far, large_blue_circle). is(medium_blue_circle, left, large_blue_circle). is(blue_triangle, near, right_edge_b). is(yellow_circle, near, yellow_triangle). is(yellow_circle, left, yellow_triangle). is(black_square, right, yellow_triangle). is(black_square, below, yellow_triangle). is(a, left, b). is(b, left, c).\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['C']",
    "asp_result": "satisfiable, but no query results"
  },
  {
    "context": "There is a block called A. In A, there are four blue circles: two small ones, a medium one, and a large one. The two small circles are below the large circle. The medium circle is far above and to the left of the large circle. There is another block called B, Which is to the right of A. In B, there is a blue triangle near the right edge of B. There is another block called C, Which is to the right of B. In C, there is a yellow circle, a large yellow triangle, and a black square. The yellow circle is near and to the left of the yellow triangle. The black square is to the right and below the yellow triangle.",
    "question": "What block does not have a circle inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(small_blue_circle_1, a). object(small_blue_circle_2, a). object(medium_blue_circle, a). object(large_blue_circle, a). is(small_blue_circle_1, below, large_blue_circle). is(small_blue_circle_2, below, large_blue_circle). is(medium_blue_circle, far, large_blue_circle). is(medium_blue_circle, left, large_blue_circle). object(blue_triangle, b). is(blue_triangle, near, right_edge_b). object(yellow_circle, c). object(yellow_triangle, c). object(black_square, c). is(yellow_circle, near, yellow_triangle). is(yellow_circle, left, yellow_triangle). is(black_square, right, yellow_triangle). is(black_square, below, yellow_triangle).\n\nQuery: query(Block) :- block(Block), not object(Circle, Block), Circle = small_blue_circle_1; Circle = small_blue_circle_2; Circle = medium_blue_circle; Circle = large_blue_circle; Circle = yellow_circle.\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['B']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks named A, B, and C. A is to the right of B and B is to the right of C. In A, there is a small yellow triangle that is near and to the left of a medium yellow circle. In B, there is a medium black circle Which is above a large blue triangle. The large triangle is above and near a small blue circle. There is also a large black circle far below the small blue circle. In C, there is a medium blue circle.",
    "question": "What block does not have a triangle inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(small_yellow_triangle, a). object(medium_yellow_circle, a). object(medium_black_circle, b). object(large_blue_triangle, b). object(small_blue_circle, b). object(large_black_circle, b). object(medium_blue_circle, c). is(small_yellow_triangle, near, medium_yellow_circle). is(small_yellow_triangle, left, medium_yellow_circle). is(medium_black_circle, above, large_blue_triangle). is(large_blue_triangle, above, small_blue_circle). is(small_blue_circle, near, large_blue_triangle). is(large_black_circle, far, small_blue_circle). is(a, right, b). is(b, right, c). is(a, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, b). is(b, right, c). is(c, right, a). is(a, right, c). is(b, right, a). is(c, right, b). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c, right, c). is(a, right, a). is(b, right, b). is(c\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['C']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks called A, B and C. A is to the left of B and B is to the left of C. In A, there is a small blue circle. In B, there is a large blue triangle that is touching the top of a small yellow triangle. In C, there are four circles, a large yellow one, a small blue one, a small black one, and a large black one. The large yellow circle is touching the large black circle and is above and near the small blue circle. The small black circle is near and to the right of the small blue circle. The large black circle is above and near the small black circle.",
    "question": "What block does not have a circle inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(small_blue_circle, a). object(large_blue_triangle, b). object(small_yellow_triangle, b). object(large_yellow_circle, c). object(small_blue_circle, c). object(small_black_circle, c). object(large_black_circle, c). is(small_blue_circle, left, large_blue_triangle). is(small_yellow_triangle, below, large_blue_triangle). is(large_yellow_circle, touching, large_black_circle). is(large_yellow_circle, above, small_blue_circle). is(large_yellow_circle, near, small_blue_circle). is(small_blue_circle, near, small_black_circle). is(small_blue_circle, left, small_black_circle). is(small_black_circle, near, large_black_circle). is(small_black_circle, above, large_black_circle). is(small_blue_circle, near, large_yellow_circle). is(small_blue_circle, left, large_yellow_circle). is(small_blue_circle, above, large_yellow_circle). is(small_yellow_triangle, near, large_blue_triangle). is(small_yellow_triangle, left, large_blue_triangle). is(small_yellow_triangle, above, large_blue_triangle). is(small_yellow_triangle, touching, large_blue_triangle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue_circle). is(small_yellow_triangle, above, small_blue_circle). is(small_yellow_triangle, touching, small_blue_circle). is(small_yellow_triangle, near, small_black_circle). is(small_yellow_triangle, left, small_black_circle). is(small_yellow_triangle, above, small_black_circle). is(small_yellow_triangle, touching, small_black_circle). is(small_yellow_triangle, near, large_black_circle). is(small_yellow_triangle, left, large_black_circle). is(small_yellow_triangle, above, large_black_circle). is(small_yellow_triangle, touching, large_black_circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue_circle). is(small_yellow_triangle, above, small_blue_circle). is(small_yellow_triangle, touching, small_blue_circle). is(small_yellow_triangle, near, small_black_circle). is(small_yellow_triangle, left, small_black_circle). is(small_yellow_triangle, above, small_black_circle). is(small_yellow_triangle, touching, small_black_circle). is(small_yellow_triangle, near, large_black_circle). is(small_yellow_triangle, left, large_black_circle). is(small_yellow_triangle, above, large_black_circle). is(small_yellow_triangle, touching, large_black_circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue_circle). is(small_yellow_triangle, above, small_blue_circle). is(small_yellow_triangle, touching, small_blue_circle). is(small_yellow_triangle, near, small_black_circle). is(small_yellow_triangle, left, small_black_circle). is(small_yellow_triangle, above, small_black_circle). is(small_yellow_triangle, touching, small_black_circle). is(small_yellow_triangle, near, large_black_circle). is(small_yellow_triangle, left, large_black_circle). is(small_yellow_triangle, above, large_black_circle). is(small_yellow_triangle, touching, large_black_circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue_circle). is(small_yellow_triangle, above, small_blue_circle). is(small_yellow_triangle, touching, small_blue_circle). is(small_yellow_triangle, near, small_black_circle). is(small_yellow_triangle, left, small_black_circle). is(small_yellow_triangle, above, small_black_circle). is(small_yellow_triangle, touching, small_black_circle). is(small_yellow_triangle, near, large_black_circle). is(small_yellow_triangle, left, large_black_circle). is(small_yellow_triangle, above, large_black_circle). is(small_yellow_triangle, touching, large_black_circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue_circle). is(small_yellow_triangle, above, small_blue_circle). is(small_yellow_triangle, touching, small_blue_circle). is(small_yellow_triangle, near, small_black_circle). is(small_yellow_triangle, left, small_black_circle). is(small_yellow_triangle, above, small_black_circle). is(small_yellow_triangle, touching, small_black_circle). is(small_yellow_triangle, near, large_black_circle). is(small_yellow_triangle, left, large_black_circle). is(small_yellow_triangle, above, large_black_circle). is(small_yellow_triangle, touching, large_black_circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue_circle). is(small_yellow_triangle, above, small_blue_circle). is(small_yellow_triangle, touching, small_blue_circle). is(small_yellow_triangle, near, small_black_circle). is(small_yellow_triangle, left, small_black_circle). is(small_yellow_triangle, above, small_black_circle). is(small_yellow_triangle, touching, small_black_circle). is(small_yellow_triangle, near, large_black_circle). is(small_yellow_triangle, left, large_black_circle). is(small_yellow_triangle, above, large_black_circle). is(small_yellow_triangle, touching, large_black_circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue_circle). is(small_yellow_triangle, above, small_blue_circle). is(small_yellow_triangle, touching, small_blue_circle). is(small_yellow_triangle, near, small_black_circle). is(small_yellow_triangle, left, small_black_circle). is(small_yellow_triangle, above, small_black_circle). is(small_yellow_triangle, touching, small_black_circle). is(small_yellow_triangle, near, large_black_circle). is(small_yellow_triangle, left, large_black_circle). is(small_yellow_triangle, above, large_black_circle). is(small_yellow_triangle, touching, large_black_circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue_circle). is(small_yellow_triangle, above, small_blue_circle). is(small_yellow_triangle, touching, small_blue_circle). is(small_yellow_triangle, near, small_black_circle). is(small_yellow_triangle, left, small_black_circle). is(small_yellow_triangle, above, small_black_circle). is(small_yellow_triangle, touching, small_black_circle). is(small_yellow_triangle, near, large_black_circle). is(small_yellow_triangle, left, large_black_circle). is(small_yellow_triangle, above, large_black_circle). is(small_yellow_triangle, touching, large_black_circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue_circle). is(small_yellow_triangle, above, small_blue_circle). is(small_yellow_triangle, touching, small_blue_circle). is(small_yellow_triangle, near, small_black_circle). is(small_yellow_triangle, left, small_black_circle). is(small_yellow_triangle, above, small_black_circle). is(small_yellow_triangle, touching, small_black_circle). is(small_yellow_triangle, near, large_black_circle). is(small_yellow_triangle, left, large_black_circle). is(small_yellow_triangle, above, large_black_circle). is(small_yellow_triangle, touching, large_black_circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue_circle). is(small_yellow_triangle, above, small_blue_circle). is(small_yellow_triangle, touching, small_blue_circle). is(small_yellow_triangle, near, small_black_circle). is(small_yellow_triangle, left, small_black_circle). is(small_yellow_triangle, above, small_black_circle). is(small_yellow_triangle, touching, small_black_circle). is(small_yellow_triangle, near, large_black_circle). is(small_yellow_triangle, left, large_black_circle). is(small_yellow_triangle, above, large_black_circle). is(small_yellow_triangle, touching, large_black_circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue_circle). is(small_yellow_triangle, above, small_blue_circle). is(small_yellow_triangle, touching, small_blue_circle). is(small_yellow_triangle, near, small_black_circle). is(small_yellow_triangle, left, small_black_circle). is(small_yellow_triangle, above, small_black_circle). is(small_yellow_triangle, touching, small_black_circle). is(small_yellow_triangle, near, large_black_circle). is(small_yellow_triangle, left, large_black_circle). is(small_yellow_triangle, above, large_black_circle). is(small_yellow_triangle, touching, large_black_circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue_circle). is(small_yellow_triangle, above, small_blue_circle). is(small_yellow_triangle, touching, small_blue_circle). is(small_yellow_triangle, near, small_black_circle). is(small_yellow_triangle, left, small_black_circle). is(small_yellow_triangle, above, small_black_circle). is(small_yellow_triangle, touching, small_black_circle). is(small_yellow_triangle, near, large_black_circle). is(small_yellow_triangle, left, large_black_circle). is(small_yellow_triangle, above, large_black_circle). is(small_yellow_triangle, touching, large_black_circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue_circle). is(small_yellow_triangle, above, small_blue_circle). is(small_yellow_triangle, touching, small_blue_circle). is(small_yellow_triangle, near, small_black_circle). is(small_yellow_triangle, left, small_black_circle). is(small_yellow_triangle, above, small_black_circle). is(small_yellow_triangle, touching, small_black_circle). is(small_yellow_triangle, near, large_black_circle). is(small_yellow_triangle, left, large_black_circle). is(small_yellow_triangle, above, large_black_circle). is(small_yellow_triangle, touching, large_black_circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue_circle). is(small_yellow_triangle, above, small_blue_circle). is(small_yellow_triangle, touching, small_blue_circle). is(small_yellow_triangle, near, small_black_circle). is(small_yellow_triangle, left, small_black_circle). is(small_yellow_triangle, above, small_black_circle). is(small_yellow_triangle, touching, small_black_circle). is(small_yellow_triangle, near, large_black_circle). is(small_yellow_triangle, left, large_black_circle). is(small_yellow_triangle, above, large_black_circle). is(small_yellow_triangle, touching, large_black_circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue_circle). is(small_yellow_triangle, above, small_blue_circle). is(small_yellow_triangle, touching, small_blue_circle). is(small_yellow_triangle, near, small_black_circle). is(small_yellow_triangle, left, small_black_circle). is(small_yellow_triangle, above, small_black_circle). is(small_yellow_triangle, touching, small_black_circle). is(small_yellow_triangle, near, large_black_circle). is(small_yellow_triangle, left, large_black_circle). is(small_yellow_triangle, above, large_black_circle). is(small_yellow_triangle, touching, large_black_circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue_circle). is(small_yellow_triangle, above, small_blue_circle). is(small_yellow_triangle, touching, small_blue_circle). is(small_yellow_triangle, near, small_black_circle). is(small_yellow_triangle, left, small_black_circle). is(small_yellow_triangle, above, small_black_circle). is(small_yellow_triangle, touching, small_black_circle). is(small_yellow_triangle, near, large_black_circle). is(small_yellow_triangle, left, large_black_circle). is(small_yellow_triangle, above, large_black_circle). is(small_yellow_triangle, touching, large_black_circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue_circle). is(small_yellow_triangle, above, small_blue_circle). is(small_yellow_triangle, touching, small_blue_circle). is(small_yellow_triangle, near, small_black_circle). is(small_yellow_triangle, left, small_black_circle). is(small_yellow_triangle, above, small_black_circle). is(small_yellow_triangle, touching, small_black circle). is(small_yellow_triangle, near, large_black_circle). is(small_yellow_triangle, left, large_black circle). is(small_yellow_triangle, above, large_black circle). is(small_yellow_triangle, touching, large_black circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue circle). is(small_yellow_triangle, above, small_blue circle). is(small_yellow_triangle, touching, small_blue circle). is(small_yellow_triangle, near, small_black circle). is(small_yellow_triangle, left, small_black circle). is(small_yellow_triangle, above, small_black circle). is(small_yellow_triangle, touching, small black circle). is(small_yellow_triangle, near, large_black circle). is(small_yellow_triangle, left, large_black circle). is(small_yellow_triangle, above, large black circle). is(small_yellow_triangle, touching, large black circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue circle). is(small_yellow_triangle, above, small_blue circle). is(small_yellow_triangle, touching, small blue circle). is(small_yellow_triangle, near, small_black circle). is(small_yellow_triangle, left, small black circle). is(small_yellow_triangle, above, small black circle). is(small_yellow_triangle, touching, small black circle). is(small_yellow_triangle, near, large_black circle). is(small_yellow_triangle, left, large_black circle). is(small_yellow_triangle, above, large black circle). is(small_yellow_triangle, touching, large black circle). is(small_yellow_triangle, near, large_yellow_circle). is(small_yellow_triangle, left, large_yellow_circle). is(small_yellow_triangle, above, large_yellow_circle). is(small_yellow_triangle, touching, large_yellow_circle). is(small_yellow_triangle, near, small_blue_circle). is(small_yellow_triangle, left, small_blue circle). is(small_yellow_triangle, above, small_blue circle). is(small_yellow_triangle, touching, small blue circle). is(small_yellow_triangle, near, small_black circle). is(small_yellow_triangle, left, small black circle). is(small_yellow_triangle, above, small black circle). is(small_yellow_triangle, touching, small black circle). is(small_yellow_triangle, near, large_black circle). is(small_yellow_triangle, left, large-black circle). is(small_yellow_triangle, above, large-black circle). is(small_yellow_triangle, touching, large-black circle). is(small\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['B']",
    "asp_result": "Error: too many messages."
  },
  {
    "context": "There are three blocks called A, B, and C. B is to the right of A and C is to the right of B. In A, there is a medium blue circle Which is near and above a small blue circle. In B, there is a large yellow triangle Which is to the right and touching a large blue triangle. There is also a small yellow triangle to the left of the large blue triangle. In C, there is a small blue circle that is far above a blue triangle. The blue triangle is to the left of a black triangle.",
    "question": "What block does not have a triangle inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(medium_blue_circle, a). object(small_blue_circle, a). object(large_yellow_triangle, b). object(large_blue_triangle, b). object(small_yellow_triangle, b). object(small_blue_circle, c). object(blue_triangle, c). object(black_triangle, c). is(medium_blue_circle, near, small_blue_circle). is(medium_blue_circle, above, small_blue_circle). is(large_yellow_triangle, right, large_blue_triangle). is(large_yellow_triangle, touching, large_blue_triangle). is(small_yellow_triangle, left, large_blue_triangle). is(small_blue_circle, far, blue_triangle). is(blue_triangle, left, black_triangle).\n\nQuery: query(Block) :- block(Block), not object(Triangle, Block), Triangle = large_yellow_triangle; Triangle = large_blue_triangle; Triangle = small_yellow_triangle; Triangle = blue_triangle; Triangle = black_triangle.\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['A']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There is a block called A. In A there is a small blue circle. There is another block called B Which is to the right of A. In B, there is a large yellow square, Which is near and to the left of a small yellow square. Above both squares there is a black triangle. To the right of B there is a block called C. In C, there is a black square that is to the right and far from a yellow triangle.",
    "question": "What block is to the left of B",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(small_blue_circle, a). object(large_yellow_square, b). object(small_yellow_square, b). object(black_triangle, b). object(black_square, c). object(yellow_triangle, c). is(small_blue_circle, left, a). is(large_yellow_square, near, small_yellow_square). is(small_yellow_square, left, large_yellow_square). is(black_triangle, above, large_yellow_square). is(black_square, right, b). is(yellow_triangle, above, black_square). is(black_square, far, yellow_triangle). is(a, left, b). is(b, left, c).\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['A']",
    "asp_result": "satisfiable, but no query results"
  },
  {
    "context": "There is a block called A. In A there is a small blue circle. There is another block called B Which is to the right of A. In B, there is a large yellow square, Which is near and to the left of a small yellow square. Above both squares there is a black triangle. To the right of B there is a block called C. In C, there is a black square that is to the right and far from a yellow triangle.",
    "question": "Which block has a triangle above a square?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(small_blue_circle, a). object(large_yellow_square, b). object(small_yellow_square, b). object(black_triangle, b). object(black_square, c). object(yellow_triangle, c). is(small_blue_circle, touching, bottom_edge_a). is(black_triangle, above, large_yellow_square). is(black_triangle, above, small_yellow_square). is(black_square, right, yellow_triangle). is(black_square, far, yellow_triangle). is(b, right, a). is(c, right, b). is(a, top, b). is(b, top, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue_circle, left, yellow_triangle). is(small_blue_circle, left, a). is(small_blue_circle, left, b). is(small_blue_circle, left, c). is(small_blue_circle, left, large_yellow_square). is(small_blue_circle, left, small_yellow_square). is(small_blue_circle, left, black_triangle). is(small_blue_circle, left, black_square). is(small_blue\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.",
    "actual_answer": "['B']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks called A, B, and C. In A, there is a large blue circle that is near and to the left of a large yellow circle. There is also a medium black triangle below the blue circle. In B, Which is to the right of A, there are three small blue circles far above two small black triangles. C is to the right of B. In C, there is a large blue triangle that is near and to the left of a medium black circle. There is also a large black triangle near and below the large blue triangle.",
    "question": "What block does not have a large object inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(large_blue_circle, a). object(large_yellow_circle, a). object(medium_black_triangle, a). object(small_blue_circle_1, b). object(small_blue_circle_2, b). object(small_blue_circle_3, b). object(small_black_triangle_1, b). object(small_black_triangle_2, b). object(large_blue_triangle, c). object(medium_black_circle, c). object(large_black_triangle, c). is(large_blue_circle, near, large_yellow_circle). is(large_blue_circle, left, large_yellow_circle). is(medium_black_triangle, below, large_blue_circle). is(small_blue_circle_1, above, small_black_triangle_1). is(small_blue_circle_2, above, small_black_triangle_1). is(small_blue_circle_3, above, small_black_triangle_2). is(small_blue_circle_1, far, small_black_triangle_1). is(small_blue_circle_2, far, small_black_triangle_1). is(small_blue_circle_3, far, small_black_triangle_2). is(large_blue_triangle, near, medium_black_circle). is(large_blue_triangle, left, medium_black_circle). is(large_black_triangle, near, large_blue_triangle). is(large_black_triangle, below, large_blue_triangle). is(a, left, b). is(b, left, c).\n\nQuery: query(Block) :- block(Block), not object(LargeObject, Block), LargeObject = large_blue_circle; LargeObject = large_yellow_circle; LargeObject = large_blue_triangle; LargeObject = large_black_triangle.\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['B']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks called A, B, and C. A is to the left of B and B is to the left of C. In A, there is a large yellow square that is near and to the left of a small yellow square. Below the small square is a medium yellow circle. In B, there is a small black triangle that is to the left of a large black square. Far below the black square is a small blue circle. In C, there is a medium blue triangle.",
    "question": "What block does not have any blue objects inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(large_yellow_square, a). object(small_yellow_square, a). object(medium_yellow_circle, a). object(small_black_triangle, b). object(large_black_square, b). object(small_blue_circle, b). object(medium_blue_triangle, c). is(large_yellow_square, left, small_yellow_square). is(small_yellow_square, above, medium_yellow_circle). is(small_yellow_square, near, large_yellow_square). is(small_black_triangle, left, large_black_square). is(small_blue_circle, far, large_black_square). is(small_blue_circle, below, large_black_square). is(medium_blue_triangle, touching, bottom_c). is(a, left, b). is(b, left, c). is(a, left, c). is(a, right, b). is(b, right, c). is(a, right, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left, c). is(b, left, c). is(a, left\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['A']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks called A, B, and C. A is to the left of B and B is to the left of C. In A, there is a medium yellow circle near and above a medium blue circle. There is also a large black square near and below the medium blue circle. In B, there is a medium yellow triangle near and to the left of a small blue triangle. The small blue triangle is above a medium blue triangle. The medium blue triangle is to the right of the medium yellow triangle and above a large black circle. In C, there is a medium black triangle that is near and to the left of a large blue triangle. There is a large black square near and to the right of large blue triangle.",
    "question": "What block does not have any yellow objects inside?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(medium_yellow_circle, a). object(medium_blue_circle, a). object(large_black_square, a). object(medium_yellow_triangle, b). object(small_blue_triangle, b). object(medium_blue_triangle, b). object(large_black_circle, b). object(medium_black_triangle, c). object(large_blue_triangle, c). object(large_black_square, c). is(medium_yellow_circle, above, medium_blue_circle). is(medium_yellow_circle, near, medium_blue_circle). is(large_black_square, below, medium_blue_circle). is(large_black_square, near, medium_blue_circle). is(small_blue_triangle, above, medium_blue_triangle). is(small_blue_triangle, left, medium_yellow_triangle). is(medium_blue_triangle, right, medium_yellow_triangle). is(medium_blue_triangle, above, large_black_circle). is(medium_yellow_triangle, left, medium_blue_triangle). is(medium_black_triangle, left, large_blue_triangle). is(medium_black_triangle, near, large_blue_triangle). is(large_black_square, right, large_blue_triangle). is(a, left, b). is(b, left, c).\n\nQuery: query(NoYellowBlock) :- block(NoYellowBlock), not object(YellowObject, NoYellowBlock), YellowObject = medium_yellow_circle; YellowObject = medium_yellow_triangle.\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['C']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks called A, B, and C. B is to the left of A and C is to the left of B. In A, there is a small blue circle near and above a medium blue circle. Far to the right of the circles is a large yellow square. In B, there is a small black square that is to the right of a small black triangle. There is also a small blue square far above the small black triangle. In C, there is a large black triangle that is near and above a small blue circle. The small blue circle is also near and above a small black triangle. To the left of the small black triangle is a medium yellow circle.",
    "question": "What block does not have any squares inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(small_blue_circle, a). object(medium_blue_circle, a). object(large_yellow_square, a). object(small_black_square, b). object(small_black_triangle, b). object(small_blue_square, b). object(large_black_triangle, c). object(small_blue_circle, c). object(small_black_triangle, c). object(medium_yellow_circle, c). is(small_blue_circle, above, medium_blue_circle). is(small_blue_circle, near, medium_blue_circle). is(small_blue_circle, above, large_yellow_square). is(small_blue_circle, near, large_yellow_square). is(small_black_square, right, small_black_triangle). is(small_blue_square, above, small_black_triangle). is(small_blue_square, far, small_black_triangle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(small_blue_circle, above, small_black_triangle). is(small_blue_circle, near, small_black_triangle). is(small_blue_circle, above, medium_yellow_circle). is(small_blue_circle, near, medium_yellow_circle). is(small_blue_circle, above, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_circle, above, small_blue_circle). is(small_blue\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['C']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks called A, B, and C. B is to the right of A and C is to the right of B. In A, there is a small black triangle near and below a large yellow circle. Far to the right of the yellow circle is a small blue square. In B, there is a large black triangle far below a small blue circle. The small blue circle is near and below a small blue triangle. In C, there is a small blue circle.",
    "question": "What block has all of squares inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(small_black_triangle, a). object(large_yellow_circle, a). object(small_blue_square, a). object(large_black_triangle, b). object(small_blue_circle, b). object(small_blue_triangle, b). object(small_blue_circle, c). is(small_black_triangle, below, large_yellow_circle). is(small_blue_square, right, large_yellow_circle). is(small_blue_circle, below, large_black_triangle). is(small_blue_circle, near, large_black_triangle). is(small_blue_triangle, below, small_blue_circle). is(small_blue_circle, near, small_blue_triangle). is(small_blue_circle, below, small_blue_circle). is(small_blue_circle, near, small_blue_circle). is(b, right, a). is(c, right, b). is(a, left, b). is(c, left, b). is(c, right, a). is(b, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a). is(c, right, b). is(b, left, c). is(c, left, b). is(c, right, a). is(a, left, c). is(b, left, c). is(c, right, a). is(a, left, b). is(b, right, a\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['A']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks called A, B and C. B is to the left of A and C is to the left of B. In A, there is a large blue triangle that is near and to the right of a medium yellow circle. There is also a large black square near and to the left of the medium yellow circle. In B, there is a medium yellow triangle that is near and above a large black square. Near and below the black square is a medium blue circle. In C, there is a small blue triangle to the right of a small black triangle. Near and to the left of the of the small black triangle is a large blue triangle.",
    "question": "What block does not have any squares inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(large_blue_triangle, a). object(medium_yellow_circle, a). object(large_black_square, a). object(medium_yellow_triangle, b). object(large_black_square, b). object(medium_blue_circle, b). object(small_blue_triangle, c). object(small_black_triangle, c). object(large_blue_triangle, c). is(large_blue_triangle, near, medium_yellow_circle). is(large_blue_triangle, right, medium_yellow_circle). is(large_black_square, near, medium_yellow_circle). is(large_black_square, left, medium_yellow_circle). is(medium_yellow_triangle, near, large_black_square). is(medium_yellow_triangle, above, large_black_square). is(medium_blue_circle, near, large_black_square). is(medium_blue_circle, below, large_black_square). is(small_blue_triangle, right, small_black_triangle). is(small_blue_triangle, near, small_black_triangle). is(small_black_triangle, near, large_blue_triangle). is(small_black_triangle, left, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, right, large_blue_triangle). is(a, right, b). is(b, right, c). is(a, near, b). is(b, near, c). is(a, near, c). is(a, left, b). is(b, left, c). is(a, left, c). is(a, above, b). is(b, above, c). is(a, above, c). is(a, below, b). is(b, below, c). is(a, below, c). is(a, front, b). is(b, front, c). is(a, front, c). is(a, behind, b). is(b, behind, c). is(a, behind, c). is(a, adjacent, b). is(b, adjacent, c). is(a, adjacent, c). is(a, touching, b). is(b, touching, c). is(a, touching, c). is(a, disconnected, b). is(b, disconnected, c). is(a, disconnected, c). is(a, top, b). is(b, top, c). is(a, top, c). is(a, bottom, b). is(b, bottom, c). is(a, bottom, c). is(a, left_edge, b). is(b, left_edge, c). is(a, left_edge, c). is(a, right_edge, b). is(b, right_edge, c). is(a, right_edge, c). is(a, top_edge, b). is(b, top_edge, c). is(a, top_edge, c). is(a, bottom_edge, b). is(b, bottom_edge, c). is(a, bottom_edge, c). is(a, front_edge, b). is(b, front_edge, c). is(a, front_edge, c). is(a, back_edge, b). is(b, back_edge, c). is(a, back_edge, c). is(a, left_face, b). is(b, left_face, c). is(a, left_face, c). is(a, right_face, b). is(b, right_face, c). is(a, right_face, c). is(a, top_face, b). is(b, top_face, c). is(a, top_face, c). is(a, bottom_face, b). is(b, bottom_face, c). is(a, bottom_face, c). is(a, front_face, b). is(b, front_face, c). is(a, front_face, c). is(a, back_face, b). is(b, back_face, c). is(a, back_face, c). is(a, left, b). is(b, left, c). is(a, left, c). is(a, right, b). is(b, right, c). is(a, right, c). is(a, above, b). is(b, above, c). is(a, above, c). is(a, below, b). is(b, below, c). is(a, below, c). is(a, near, b). is(b, near, c). is(a, near, c). is(a, far, b). is(b, far, c). is(a, far, c). is(a, front, b). is(b, front, c). is(a, front, c). is(a, behind, b). is(b, behind, c). is(a, behind, c). is(a, adjacent, b). is(b, adjacent, c). is(a, adjacent, c). is(a, touching, b). is(b, touching, c). is(a, touching, c). is(a, disconnected, b). is(b, disconnected, c). is(a, disconnected, c). is(a, top, b). is(b, top, c). is(a, top, c). is(a, bottom, b). is(b, bottom, c). is(a, bottom, c). is(a, left_edge, b). is(b, left_edge, c). is(a, left_edge, c). is(a, right_edge, b). is(b, right_edge, c). is(a, right_edge, c). is(a, top_edge, b). is(b, top_edge, c). is(a, top_edge, c). is(a, bottom_edge, b). is(b, bottom_edge, c). is(a, bottom_edge, c). is(a, front_edge, b). is(b, front_edge, c). is(a, front_edge, c). is(a, back_edge, b). is(b, back_edge, c). is(a, back_edge, c). is(a, left_face, b). is(b, left_face, c). is(a, left_face, c). is(a, right_face, b). is(b, right_face, c). is(a, right_face, c). is(a, top_face, b). is(b, top_face, c). is(a, top_face, c). is(a, bottom_face, b). is(b, bottom_face, c). is(a, bottom_face, c). is(a, front_face, b). is(b, front_face, c). is(a, front_face, c). is(a, back_face, b). is(b, back_face, c). is(a, back_face, c). is(a, left, b). is(b, left, c). is(a, left, c). is(a, right, b). is(b, right, c). is(a, right, c). is(a, above, b). is(b, above, c). is(a, above, c). is(a, below, b). is(b, below, c). is(a, below, c). is(a, near, b). is(b, near, c). is(a, near, c). is(a, far, b). is(b, far, c). is(a, far, c). is(a, front, b). is(b, front, c). is(a, front, c). is(a, behind, b). is(b, behind, c). is(a, behind, c). is(a, adjacent, b). is(b, adjacent, c). is(a, adjacent, c). is(a, touching, b). is(b, touching, c). is(a, touching, c). is(a, disconnected, b). is(b, disconnected, c). is(a, disconnected, c). is(a, top, b). is(b, top, c). is(a, top, c). is(a, bottom, b). is(b, bottom, c). is(a, bottom, c). is(a, left_edge, b). is(b, left_edge, c). is(a, left_edge, c). is(a, right_edge, b). is(b, right_edge, c). is(a, right_edge, c). is(a, top_edge, b). is(b, top_edge, c). is(a, top_edge, c). is(a, bottom_edge, b). is(b, bottom_edge, c). is(a, bottom_edge, c). is(a, front_edge, b). is(b, front_edge, c). is(a, front_edge, c). is(a, back_edge, b). is(b, back_edge, c). is(a, back_edge, c). is(a, left_face, b). is(b, left_face, c). is(a, left_face, c). is(a, right_face, b). is(b, right_face, c). is(a, right_face, c). is(a, top_face, b). is(b, top_face, c). is(a, top_face, c). is(a, bottom_face, b). is(b, bottom_face, c). is(a, bottom_face, c). is(a, front_face, b). is(b, front_face, c). is(a, front_face, c). is(a, back_face, b). is(b, back_face, c). is(a, back_face, c). is(a, left, b). is(b, left, c). is(a, left, c). is(a, right, b). is(b, right, c). is(a, right, c). is(a, above, b). is(b, above, c). is(a, above, c). is(a, below, b). is(b, below, c). is(a, below, c). is(a, near, b). is(b, near, c). is(a, near, c). is(a, far, b). is(b, far, c). is(a, far, c). is(a, front, b). is(b, front, c). is(a, front, c). is(a, behind, b). is(b, behind, c). is(a, behind, c). is(a, adjacent, b). is(b, adjacent, c). is(a, adjacent, c). is(a, touching, b). is(b, touching, c). is(a, touching, c). is(a, disconnected, b). is(b, disconnected, c). is(a, disconnected, c). is(a, top, b). is(b, top, c). is(a, top, c). is(a, bottom, b). is(b, bottom, c). is(a, bottom, c). is(a, left_edge, b). is(b, left_edge, c). is(a, left_edge, c). is(a, right_edge, b). is(b, right_edge, c). is(a, right_edge, c). is(a, top_edge, b). is(b, top_edge, c). is(a, top_edge, c). is(a, bottom_edge, b). is(b, bottom_edge, c). is(a, bottom_edge, c). is(a, front_edge, b). is(b, front_edge, c). is(a, front_edge, c). is(a, back_edge, b). is(b, back_edge, c). is(a, back_edge, c). is(a, left_face, b). is(b, left_face, c). is(a, left_face, c). is(a, right_face, b). is(b, right_face, c). is(a, right_face, c). is(a, top_face, b). is(b, top_face, c). is(a, top_face, c). is(a, bottom_face, b). is(b, bottom_face, c). is(a, bottom_face, c). is(a, front_face, b). is(b, front_face, c). is(a, front_face, c). is(a, back_face, b). is(b, back_face, c). is(a, back_face, c). is(a, left, b). is(b, left, c). is(a, left, c). is(a, right, b). is(b, right, c). is(a, right, c). is(a, above, b). is(b, above, c). is(a, above, c). is(a, below, b). is(b, below, c). is(a, below, c). is(a, near, b). is(b, near, c). is(a, near, c). is(a, far, b). is(b, far, c). is(a, far, c). is(a, front, b). is(b, front, c). is(a, front, c). is(a, behind, b). is(b, behind, c). is(a, behind, c). is(a, adjacent, b). is(b, adjacent, c). is(a, adjacent, c). is(a, touching, b). is(b, touching, c). is(a, touching, c). is(a, disconnected, b). is(b, disconnected, c). is(a, disconnected, c). is(a, top, b). is(b, top, c). is(a, top, c). is(a, bottom, b). is(b, bottom, c). is(a, bottom, c). is(a, left_edge, b). is(b, left_edge, c). is(a, left_edge, c). is(a, right_edge, b). is(b, right_edge, c). is(a, right_edge, c). is(a, top_edge, b). is(b, top_edge, c). is(a, top_edge, c). is(a, bottom_edge, b). is(b, bottom_edge, c). is(a, bottom_edge, c). is(a, front_edge, b). is(b, front_edge, c). is(a, front_edge, c). is(a, back_edge, b). is(b, back_edge, c). is(a, back_edge, c). is(a, left_face, b). is(b, left_face, c). is(a, left_face, c). is(a, right_face, b). is(b, right_face, c). is(a, right_face, c). is(a, top_face, b). is(b, top_face, c). is(a, top_face, c). is(a, bottom_face, b). is(b, bottom_face, c). is(a, bottom_face, c). is(a, front_face, b). is(b, front_face, c). is(a, front_face, c). is(a, back_face, b). is(b, back_face, c). is(a, back_face, c). is(a, left, b). is(b, left, c). is(a, left, c). is(a, right, b). is(b, right, c). is(a, right, c). is(a, above, b). is(b, above, c). is(a, above, c). is(a, below, b). is(b, below, c). is(a, below, c). is(a, near, b). is(b, near, c). is(a, near, c). is(a, far, b). is(b, far, c). is(a, far, c). is(a, front, b). is(b, front, c). is(a, front, c). is(a, behind, b). is(b, behind, c). is(a, behind, c). is(a, adjacent, b). is(b, adjacent, c). is(a, adjacent, c). is(a, touching, b). is(b, touching, c). is(a, touching, c). is(a, disconnected, b). is(b, disconnected, c). is(a, disconnected, c). is(a, top, b). is(b, top, c). is(a, top, c). is(a, bottom, b). is(b, bottom, c). is(a, bottom, c). is(a, left_edge, b). is(b, left_edge, c). is(a, left_edge, c). is(a, right_edge, b). is(b, right_edge, c). is(a, right_edge, c). is(a, top_edge, b). is(b, top_edge, c). is(a, top_edge, c). is(a, bottom_edge, b). is(b, bottom_edge, c). is(a, bottom_edge, c). is(a, front_edge, b). is(b, front_edge, c). is(a, front_edge, c). is(a, back_edge, b). is(b, back_edge, c). is(a, back_edge, c). is(a, left_face, b). is(b, left_face, c). is(a, left_face, c). is(a, right_face, b). is(b, right_face, c). is(a, right_face, c). is(a, top_face, b). is(b, top_face, c). is(a, top_face, c). is(a, bottom_face, b). is(b, bottom_face, c). is(a, bottom_face, c). is(a, front_face, b). is(b, front_face, c). is(a, front_face, c). is(a, back_face, b). is(b, back_face, c). is(a, back_face, c). is(a, left, b). is(b, left, c). is(a, left, c). is(a, right, b). is(b, right, c). is(a, right, c). is(a, above, b). is(b, above, c). is(a, above, c). is(a, below, b). is(b, below, c). is(a, below, c). is(a, near, b). is(b, near, c). is(a, near, c). is(a, far, b). is(b, far, c). is(a, far, c). is(a, front, b). is(b, front, c). is(a, front, c). is(a, behind, b). is(b, behind, c). is(a, behind, c). is(a, adjacent, b). is(b, adjacent, c). is(a, adjacent, c). is(a, touching, b). is(b, touching, c). is(a, touching, c). is(a, disconnected, b). is(b, disconnected, c). is(a, disconnected, c). is(a, top, b). is(b, top, c). is(a, top, c). is(a, bottom, b). is(b, bottom, c). is(a, bottom, c). is(a, left_edge, b). is(b, left_edge, c). is(a, left_edge, c). is(a, right_edge, b). is(b, right_edge, c). is(a, right_edge, c). is(a, top_edge, b). is(b, top_edge, c). is(a, top_edge, c). is(a, bottom_edge, b). is(b, bottom_edge, c). is(a, bottom_edge, c). is(a, front_edge, b). is(b, front_edge, c). is(a, front_edge, c). is(a, back_edge, b). is(b, back_edge, c). is(a, back_edge, c). is(a, left_face, b). is(b, left_face, c). is(a, left_face, c). is(a, right_face, b). is(b, right_face, c). is(a, right_face, c). is(a, top_face, b). is(b, top_face, c). is(a, top_face, c). is(a, bottom_face, b). is(b, bottom_face, c). is(a, bottom_face, c). is\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['C']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There is a block called A. In A, there a large black circle that is far below a large yellow square. There is a block called B, Which is to the right of A. In B, there is a large blue square near and to the left of a large blue triangle. The blue triangle is near and to the right of a small yellow square. There is another block called C, Which is to the right of B. In C, there is a small blue circle that is near and above a small yellow square. Far below the small square is a large blue square.",
    "question": "What block does not have any black objects inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(large_black_circle, a). object(large_yellow_square, a). object(large_blue_square, b). object(large_blue_triangle, b). object(small_yellow_square, b). object(small_blue_circle, c). object(small_yellow_square, c). object(large_blue_square, c). is(large_yellow_square, above, large_black_circle). is(large_blue_square, near, large_blue_triangle). is(large_blue_square, left, large_blue_triangle). is(small_yellow_square, near, large_blue_triangle). is(small_yellow_square, right, large_blue_triangle). is(small_blue_circle, above, small_yellow_square). is(small_blue_circle, near, small_yellow_square). is(small_yellow_square, above, large_blue_square). is(small_yellow_square, near, large_blue_square). is(a, left, b). is(b, left, c). is(c, right, b). is(c, right, a). is(b, right, a). is(a, right, b). is(a, right, c). is(b, right, c). is(c, right, a). is(c, right, b). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a). is(a, right, b). is(b, right, c). is(a, right, c). is(b, right, a). is(c, right, b). is(c, right, a\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.",
    "actual_answer": "['C']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks called A, B, and C. A is to the left of B and B is to the left of C. In A, there is a small blue square near and below a medium black triangle. Near and above the medium black triangle is a large blue circle. In B, there is a large yellow circle far above a medium black square. The medium black square is to the near and to the left of a small yellow square. In C, there is a large yellow circle far above a small black circle.",
    "question": "What block does not have any squares inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(small_blue_square, a). object(medium_black_triangle, a). object(large_blue_circle, a). object(large_yellow_circle, b). object(medium_black_square, b). object(small_yellow_square, b). object(large_yellow_circle, c). object(small_black_circle, c). is(small_blue_square, near, medium_black_triangle). is(small_blue_square, below, medium_black_triangle). is(large_blue_circle, near, medium_black_triangle). is(large_blue_circle, above, medium_black_triangle). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, far, large_yellow_circle). is(small_yellow_square, below, large_yellow_circle). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching, medium_black_square). is(small_yellow_square, above, medium_black_square). is(small_yellow_square, below, medium_black_square). is(small_yellow_square, near, medium_black_square). is(small_yellow_square, far, medium_black_square). is(small_yellow_square, left, medium_black_square). is(small_yellow_square, right, medium_black_square). is(small_yellow_square, front, medium_black_square). is(small_yellow_square, behind, medium_black_square). is(small_yellow_square, adjacent, medium_black_square). is(small_yellow_square, disconnected, medium_black_square). is(small_yellow_square, touching\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['C']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks called A, B, and C. A is to the right of B and B is to the right of C. In A, there is a small blue triangle. In B, there is a large blue circle near and to the right of a small yellow square. The yellow square is near and to the right of a small black circle. In C, there is a small yellow circle near and below a medium black triangle. There is a small blue square near and above the black triangle.",
    "question": "What block does not have any yellow objects inside?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(small_blue_triangle, a). object(large_blue_circle, b). object(small_yellow_square, b). object(small_black_circle, b). object(small_yellow_circle, c). object(medium_black_triangle, c). object(small_blue_square, c). is(small_blue_triangle, right, a). is(a, right, b). is(b, right, c). is(small_yellow_square, right, small_black_circle). is(small_yellow_circle, below, medium_black_triangle). is(small_blue_square, above, medium_black_triangle). is(small_yellow_circle, near, medium_black_triangle). is(small_blue_square, near, medium_black_triangle). is(small_yellow_square, near, large_blue_circle). is(small_black_circle, near, large_blue_circle). is(small_yellow_square, right, large_blue_circle). is(small_black_circle, right, large_blue_circle). is(small_blue_triangle, right, a). is(small_yellow_circle, right, c). is(small_blue_square, right, c). is(small_yellow_circle, right, medium_black_triangle). is(small_blue_square, right, medium_black_triangle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellow_circle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small_blue_square). is(small_blue_square, right, small_yellowcircle). is(small_yellow_circle, right, small\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['A']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks called A, B, and C. A is to the right of B and B is to the right of C. In A, there is a small blue triangle. In B, there is a large blue circle near and to the right of a small yellow square. The yellow square is near and to the right of a small black circle. In C, there is a small yellow circle near and below a medium black triangle. There is a small blue square near and above the black triangle.",
    "question": "What block does not have any triangles inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(small_blue_triangle, a). object(large_blue_circle, b). object(small_yellow_square, b). object(small_black_circle, b). object(small_yellow_circle, c). object(medium_black_triangle, c). object(small_blue_square, c). is(small_blue_triangle, right, a). is(a, right, b). is(b, right, c). is(small_yellow_square, right, small_black_circle). is(small_yellow_circle, below, medium_black_triangle). is(small_blue_square, above, medium_black_triangle). is(small_yellow_circle, near, medium_black_triangle). is(small_blue_square, near, medium_black_triangle). is(small_yellow_square, near, large_blue_circle). is(small_black_circle, near, large_blue_circle). is(small_yellow_square, right, large_blue_circle). is(small_black_circle, right, large_blue_circle). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue_triangle, right, a). is(small_blue\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['B']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks called A, B, and C. A is to the left of B and B is to the left of C. In A, there is a small yellow square near and to the left of a large yellow circle. The large circle is near and to the left of a large blue triangle. In B, there is a small yellow square near and below a large blue triangle. There is a medium black triangle near and above the large blue triangle. In C, there is a small black square far to the left and above a small blue circle. The blue circle is near and to the left of a large yellow square.",
    "question": "What block does not have any black objects inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(small_yellow_square, a). object(large_yellow_circle, a). object(large_blue_triangle, a). object(small_yellow_square, b). object(large_blue_triangle, b). object(medium_black_triangle, b). object(small_black_square, c). object(small_blue_circle, c). object(large_yellow_square, c). is(small_yellow_square, near, large_yellow_circle). is(small_yellow_square, left, large_yellow_circle). is(large_yellow_circle, near, large_blue_triangle). is(large_yellow_circle, left, large_blue_triangle). is(small_yellow_square, near, large_blue_triangle). is(small_yellow_square, below, large_blue_triangle). is(medium_black_triangle, near, large_blue_triangle). is(medium_black_triangle, above, large_blue_triangle). is(small_black_square, far, small_blue_circle). is(small_black_square, above, small_blue_circle). is(small_blue_circle, near, large_yellow_square). is(small_blue_circle, left, large_yellow_square).\n\nQuery: query(NoBlackObjectBlock) :- block(NoBlackObjectBlock), not object(_, NoBlackObjectBlock), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _), object(_, _\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['A']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks called A, B, and C. B is to the left of A and C is to the left of B. In A, there is a medium blue square near and to the right of a large yellow square. The large yellow square is far to the right of a small blue circle. In B, there is a large black circle is near and above a large blue circle. Far below the blue circle is a large black square. In C, there is a small blue circle that is far below a large blue square.",
    "question": "What block does not have any yellow objects inside?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(medium_blue_square, a). object(large_yellow_square, a). object(small_blue_circle, a). object(large_black_circle, b). object(large_blue_circle, b). object(large_black_square, b). object(small_blue_circle, c). object(large_blue_square, c). is(medium_blue_square, right, large_yellow_square). is(small_blue_circle, right, large_yellow_square). is(small_blue_circle, below, large_yellow_square). is(large_black_circle, above, large_blue_circle). is(large_black_square, below, large_blue_circle). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far,\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.",
    "actual_answer": "['B', 'C']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks called A, B, and C. B is to the left of A and C is to the left of B. In A, there is a medium blue square near and to the right of a large yellow square. The large yellow square is far to the right of a small blue circle. In B, there is a large black circle is near and above a large blue circle. Far below the blue circle is a large black square. In C, there is a small blue circle that is far below a large blue square.",
    "question": "What block does not have any triangles inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(medium_blue_square, a). object(large_yellow_square, a). object(small_blue_circle, a). object(large_black_circle, b). object(large_blue_circle, b). object(large_black_square, b). object(small_blue_circle, c). object(large_blue_square, c). is(medium_blue_square, right, large_yellow_square). is(small_blue_circle, right, large_yellow_square). is(small_blue_circle, below, large_yellow_square). is(large_black_circle, above, large_blue_circle). is(large_blue_circle, below, large_black_circle). is(large_black_square, below, large_blue_circle). is(small_blue_circle, below, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far, large_blue_square). is(small_blue_circle, far,\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['C']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There is a block called A. In A, there is a medium black triangle that is near and below a medium blue triangle. The medium blue triangle is far below a large blue circle. The large circle is near and below a small blue triangle. There is a block called B, Which is to the right of A. In B, there is a small yellow circle far above a large yellow square. There is also a large blue triangle near and to the right of large yellow square. There is another block called C, Which is to the right of B. In C, there is a large black triangle that is far below a large blue triangle. The large blue triangle is far below a small blue triangle.",
    "question": "What block does not have any black objects inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(medium_black_triangle, a). object(medium_blue_triangle, a). object(large_blue_circle, a). object(small_blue_triangle, a). object(small_yellow_circle, b). object(large_yellow_square, b). object(large_blue_triangle, b). object(large_black_triangle, c). object(large_blue_triangle, c). object(small_blue_triangle, c). is(medium_black_triangle, near, medium_blue_triangle). is(medium_blue_triangle, below, medium_black_triangle). is(large_blue_circle, below, medium_blue_triangle). is(small_blue_triangle, below, large_blue_circle). is(b, right, a). is(c, right, b). is(large_yellow_circle, above, large_yellow_square). is(large_blue_triangle, right, large_yellow_square). is(large_blue_triangle, below, large_black_triangle). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_blue_circle). is(small_blue_triangle, near, large_blue_circle). is(small_blue_triangle, below, medium_blue_triangle). is(small_blue_triangle, near, medium_blue_triangle). is(small_blue_triangle, below, medium_black_triangle). is(small_blue_triangle, near, medium_black_triangle). is(small_blue_triangle, below, a). is(small_blue_triangle, near, a). is(small_blue_triangle, below, b). is(small_blue_triangle, near, b). is(small_blue_triangle, below, c). is(small_blue_triangle, near, c). is(small_blue_triangle, below, large_yellow_circle). is(small_blue_triangle, near, large_yellow_circle). is(small_blue_triangle, below, large_yellow_square). is(small_blue_triangle, near, large_yellow_square). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_black_triangle). is(small_blue_triangle, near, large_black_triangle). is(small_blue_triangle, below, large_blue_circle). is(small_blue_triangle, near, large_blue_circle). is(small_blue_triangle, below, medium_blue_triangle). is(small_blue_triangle, near, medium_blue_triangle). is(small_blue_triangle, below, medium_black_triangle). is(small_blue_triangle, near, medium_black_triangle). is(small_blue_triangle, below, a). is(small_blue_triangle, near, a). is(small_blue_triangle, below, b). is(small_blue_triangle, near, b). is(small_blue_triangle, below, c). is(small_blue_triangle, near, c). is(small_blue_triangle, below, large_yellow_circle). is(small_blue_triangle, near, large_yellow_circle). is(small_blue_triangle, below, large_yellow_square). is(small_blue_triangle, near, large_yellow_square). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_black_triangle). is(small_blue_triangle, near, large_black_triangle). is(small_blue_triangle, below, large_blue_circle). is(small_blue_triangle, near, large_blue_circle). is(small_blue_triangle, below, medium_blue_triangle). is(small_blue_triangle, near, medium_blue_triangle). is(small_blue_triangle, below, medium_black_triangle). is(small_blue_triangle, near, medium_black_triangle). is(small_blue_triangle, below, a). is(small_blue_triangle, near, a). is(small_blue_triangle, below, b). is(small_blue_triangle, near, b). is(small_blue_triangle, below, c). is(small_blue_triangle, near, c). is(small_blue_triangle, below, large_yellow_circle). is(small_blue_triangle, near, large_yellow_circle). is(small_blue_triangle, below, large_yellow_square). is(small_blue_triangle, near, large_yellow_square). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_black_triangle). is(small_blue_triangle, near, large_black_triangle). is(small_blue_triangle, below, large_blue_circle). is(small_blue_triangle, near, large_blue_circle). is(small_blue_triangle, below, medium_blue_triangle). is(small_blue_triangle, near, medium_blue_triangle). is(small_blue_triangle, below, medium_black_triangle). is(small_blue_triangle, near, medium_black_triangle). is(small_blue_triangle, below, a). is(small_blue_triangle, near, a). is(small_blue_triangle, below, b). is(small_blue_triangle, near, b). is(small_blue_triangle, below, c). is(small_blue_triangle, near, c). is(small_blue_triangle, below, large_yellow_circle). is(small_blue_triangle, near, large_yellow_circle). is(small_blue_triangle, below, large_yellow_square). is(small_blue_triangle, near, large_yellow_square). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_black_triangle). is(small_blue_triangle, near, large_black_triangle). is(small_blue_triangle, below, large_blue_circle). is(small_blue_triangle, near, large_blue_circle). is(small_blue_triangle, below, medium_blue_triangle). is(small_blue_triangle, near, medium_blue_triangle). is(small_blue_triangle, below, medium_black_triangle). is(small_blue_triangle, near, medium_black_triangle). is(small_blue_triangle, below, a). is(small_blue_triangle, near, a). is(small_blue_triangle, below, b). is(small_blue_triangle, near, b). is(small_blue_triangle, below, c). is(small_blue_triangle, near, c). is(small_blue_triangle, below, large_yellow_circle). is(small_blue_triangle, near, large_yellow_circle). is(small_blue_triangle, below, large_yellow_square). is(small_blue_triangle, near, large_yellow_square). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_black_triangle). is(small_blue_triangle, near, large_black_triangle). is(small_blue_triangle, below, large_blue_circle). is(small_blue_triangle, near, large_blue_circle). is(small_blue_triangle, below, medium_blue_triangle). is(small_blue_triangle, near, medium_blue_triangle). is(small_blue_triangle, below, medium_black_triangle). is(small_blue_triangle, near, medium_black_triangle). is(small_blue_triangle, below, a). is(small_blue_triangle, near, a). is(small_blue_triangle, below, b). is(small_blue_triangle, near, b). is(small_blue_triangle, below, c). is(small_blue_triangle, near, c). is(small_blue_triangle, below, large_yellow_circle). is(small_blue_triangle, near, large_yellow_circle). is(small_blue_triangle, below, large_yellow_square). is(small_blue_triangle, near, large_yellow_square). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_black_triangle). is(small_blue_triangle, near, large_black_triangle). is(small_blue_triangle, below, large_blue_circle). is(small_blue_triangle, near, large_blue_circle). is(small_blue_triangle, below, medium_blue_triangle). is(small_blue_triangle, near, medium_blue_triangle). is(small_blue_triangle, below, medium_black_triangle). is(small_blue_triangle, near, medium_black_triangle). is(small_blue_triangle, below, a). is(small_blue_triangle, near, a). is(small_blue_triangle, below, b). is(small_blue_triangle, near, b). is(small_blue_triangle, below, c). is(small_blue_triangle, near, c). is(small_blue_triangle, below, large_yellow_circle). is(small_blue_triangle, near, large_yellow_circle). is(small_blue_triangle, below, large_yellow_square). is(small_blue_triangle, near, large_yellow_square). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_black_triangle). is(small_blue_triangle, near, large_black_triangle). is(small_blue_triangle, below, large_blue_circle). is(small_blue_triangle, near, large_blue_circle). is(small_blue_triangle, below, medium_blue_triangle). is(small_blue_triangle, near, medium_blue_triangle). is(small_blue_triangle, below, medium_black_triangle). is(small_blue_triangle, near, medium_black_triangle). is(small_blue_triangle, below, a). is(small_blue_triangle, near, a). is(small_blue_triangle, below, b). is(small_blue_triangle, near, b). is(small_blue_triangle, below, c). is(small_blue_triangle, near, c). is(small_blue_triangle, below, large_yellow_circle). is(small_blue_triangle, near, large_yellow_circle). is(small_blue_triangle, below, large_yellow_square). is(small_blue_triangle, near, large_yellow_square). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_black_triangle). is(small_blue_triangle, near, large_black_triangle). is(small_blue_triangle, below, large_blue_circle). is(small_blue_triangle, near, large_blue_circle). is(small_blue_triangle, below, medium_blue_triangle). is(small_blue_triangle, near, medium_blue_triangle). is(small_blue_triangle, below, medium_black_triangle). is(small_blue_triangle, near, medium_black_triangle). is(small_blue_triangle, below, a). is(small_blue_triangle, near, a). is(small_blue_triangle, below, b). is(small_blue_triangle, near, b). is(small_blue_triangle, below, c). is(small_blue_triangle, near, c). is(small_blue_triangle, below, large_yellow_circle). is(small_blue_triangle, near, large_yellow_circle). is(small_blue_triangle, below, large_yellow_square). is(small_blue_triangle, near, large_yellow_square). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_black_triangle). is(small_blue_triangle, near, large_black_triangle). is(small_blue_triangle, below, large_blue_circle). is(small_blue_triangle, near, large_blue_circle). is(small_blue_triangle, below, medium_blue_triangle). is(small_blue_triangle, near, medium_blue_triangle). is(small_blue_triangle, below, medium_black_triangle). is(small_blue_triangle, near, medium_black_triangle). is(small_blue_triangle, below, a). is(small_blue_triangle, near, a). is(small_blue_triangle, below, b). is(small_blue_triangle, near, b). is(small_blue_triangle, below, c). is(small_blue_triangle, near, c). is(small_blue_triangle, below, large_yellow_circle). is(small_blue_triangle, near, large_yellow_circle). is(small_blue_triangle, below, large_yellow_square). is(small_blue_triangle, near, large_yellow_square). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_black_triangle). is(small_blue_triangle, near, large_black_triangle). is(small_blue_triangle, below, large_blue_circle). is(small_blue_triangle, near, large_blue_circle). is(small_blue_triangle, below, medium_blue_triangle). is(small_blue_triangle, near, medium_blue_triangle). is(small_blue_triangle, below, medium_black_triangle). is(small_blue_triangle, near, medium_black_triangle). is(small_blue_triangle, below, a). is(small_blue_triangle, near, a). is(small_blue_triangle, below, b). is(small_blue_triangle, near, b). is(small_blue_triangle, below, c). is(small_blue_triangle, near, c). is(small_blue_triangle, below, large_yellow_circle). is(small_blue_triangle, near, large_yellow_circle). is(small_blue_triangle, below, large_yellow_square). is(small_blue_triangle, near, large_yellow_square). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_black_triangle). is(small_blue_triangle, near, large_black_triangle). is(small_blue_triangle, below, large_blue_circle). is(small_blue_triangle, near, large_blue_circle). is(small_blue_triangle, below, medium_blue_triangle). is(small_blue_triangle, near, medium_blue_triangle). is(small_blue_triangle, below, medium_black_triangle). is(small_blue_triangle, near, medium_black_triangle). is(small_blue_triangle, below, a). is(small_blue_triangle, near, a). is(small_blue_triangle, below, b). is(small_blue_triangle, near, b). is(small_blue_triangle, below, c). is(small_blue_triangle, near, c). is(small_blue_triangle, below, large_yellow_circle). is(small_blue_triangle, near, large_yellow_circle). is(small_blue_triangle, below, large_yellow_square). is(small_blue_triangle, near, large_yellow_square). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_black_triangle). is(small_blue_triangle, near, large_black_triangle). is(small_blue_triangle, below, large_blue_circle). is(small_blue_triangle, near, large_blue_circle). is(small_blue_triangle, below, medium_blue_triangle). is(small_blue_triangle, near, medium_blue_triangle). is(small_blue_triangle, below, medium_black_triangle). is(small_blue_triangle, near, medium_black_triangle). is(small_blue_triangle, below, a). is(small_blue_triangle, near, a). is(small_blue_triangle, below, b). is(small_blue_triangle, near, b). is(small_blue_triangle, below, c). is(small_blue_triangle, near, c). is(small_blue_triangle, below, large_yellow_circle). is(small_blue_triangle, near, large_yellow_circle). is(small_blue_triangle, below, large_yellow_square). is(small_blue_triangle, near, large_yellow_square). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_black_triangle). is(small_blue_triangle, near, large_black_triangle). is(small_blue_triangle, below, large_blue_circle). is(small_blue_triangle, near, large_blue_circle). is(small_blue_triangle, below, medium_blue_triangle). is(small_blue_triangle, near, medium_blue_triangle). is(small_blue_triangle, below, medium_black_triangle). is(small_blue_triangle, near, medium_black_triangle). is(small_blue_triangle, below, a). is(small_blue_triangle, near, a). is(small_blue_triangle, below, b). is(small_blue_triangle, near, b). is(small_blue_triangle, below, c). is(small_blue_triangle, near, c). is(small_blue_triangle, below, large_yellow_circle). is(small_blue_triangle, near, large_yellow_circle). is(small_blue_triangle, below, large_yellow_square). is(small_blue_triangle, near, large_yellow_square). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_black_triangle). is(small_blue_triangle, near, large_black_triangle). is(small_blue_triangle, below, large_blue_circle). is(small_blue_triangle, near, large_blue_circle). is(small_blue_triangle, below, medium_blue_triangle). is(small_blue_triangle, near, medium_blue_triangle). is(small_blue_triangle, below, medium_black_triangle). is(small_blue_triangle, near, medium_black_triangle). is(small_blue_triangle, below, a). is(small_blue_triangle, near, a). is(small_blue_triangle, below, b). is(small_blue_triangle, near, b). is(small_blue_triangle, below, c). is(small_blue_triangle, near, c). is(small_blue_triangle, below, large_yellow_circle). is(small_blue_triangle, near, large_yellow_circle). is(small_blue_triangle, below, large_yellow_square). is(small_blue_triangle, near, large_yellow_square). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_black_triangle). is(small_blue_triangle, near, large_black_triangle). is(small_blue_triangle, below, large_blue_circle). is(small_blue_triangle, near, large_blue_circle). is(small_blue_triangle, below, medium_blue_triangle). is(small_blue_triangle, near, medium_blue_triangle). is(small_blue_triangle, below, medium_black_triangle). is(small_blue_triangle, near, medium_black_triangle). is(small_blue_triangle, below, a). is(small_blue_triangle, near, a). is(small_blue_triangle, below, b). is(small_blue_triangle, near, b). is(small_blue_triangle, below, c). is(small_blue_triangle, near, c). is(small_blue_triangle, below, large_yellow_circle). is(small_blue_triangle, near, large_yellow_circle). is(small_blue_triangle, below, large_yellow_square). is(small_blue_triangle, near, large_yellow_square). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_black_triangle). is(small_blue_triangle, near, large_black_triangle). is(small_blue_triangle, below, large_blue_circle). is(small_blue_triangle, near, large_blue_circle). is(small_blue_triangle, below, medium_blue_triangle). is(small_blue_triangle, near, medium_blue_triangle). is(small_blue_triangle, below, medium_black_triangle). is(small_blue_triangle, near, medium_black_triangle). is(small_blue_triangle, below, a). is(small_blue_triangle, near, a). is(small_blue_triangle, below, b). is(small_blue_triangle, near, b). is(small_blue_triangle, below, c). is(small_blue_triangle, near, c). is(small_blue_triangle, below, large_yellow_circle). is(small_blue_triangle, near, large_yellow_circle). is(small_blue_triangle, below, large_yellow_square). is(small_blue_triangle, near, large_yellow_square). is(small_blue_triangle, below, large_blue_triangle). is(small_blue_triangle, near, large_blue_triangle). is(small_blue_triangle, below, large_black_triangle). is(small_blue_triangle, near, large_black_triangle). is(small_blue_triangle, below, large_blue_circle). is\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['B']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks called A, B, and C. A is to the left of B, and B is to the left of C. In A, there is a large blue triangle to the left of and below a large black square. Far above the square is a large black circle. In B, there is a large blue circle near and below a small blue circle. The small blue circle is near and below a large yellow square. There is a medium blue square far to the left of the yellow square. In C, there is a large blue square.",
    "question": "What block does not have a circle inside of it?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(large_blue_triangle, a). object(large_black_square, a). object(large_black_circle, a). object(large_blue_circle, b). object(small_blue_circle, b). object(large_yellow_square, b). object(medium_blue_square, b). object(large_blue_square, c). is(large_blue_triangle, left, large_black_square). is(large_blue_triangle, below, large_black_square). is(large_black_circle, above, large_black_square). is(large_blue_circle, near, small_blue_circle). is(small_blue_circle, near, large_yellow_square). is(small_blue_circle, below, large_yellow_square). is(medium_blue_square, far, large_yellow_square). is(a, left, b). is(b, left, c). is(a, left, c). is(c, right, a). is(c, right, b). is(b, right, a). is(b, right, c). is(c, left, a). is(c, left, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b, left, a). is(b, left, c). is(c, right, a). is(c, right, b). is(a, right, b). is(a, right, c). is(b\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['C']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There is a block called A. It has a big blue circle and a red square. The big blue circle is below the red square. There is another block called B Which is above block A. There are a small blue circle and a yellow square in this block. The small blue circle is to the left of the yellow square.",
    "question": "Which blocks have a square below a circle?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b). object(big_blue_circle, a). object(red_square, a). object(small_blue_circle, b). object(yellow_square, b). is(big_blue_circle, below, red_square). is(small_blue_circle, left, yellow_square). is(a, top, b).\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['B']",
    "asp_result": "satisfiable, but no query results"
  },
  {
    "context": "There is a block called A. It has a big blue circle and a red square. The big blue circle is below the red square. There is another block called B Which is above block A. There are a small blue circle and a yellow square in this block. The small blue circle is to the left of the yellow square.",
    "question": "Which block has a square below a circle?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b). object(big_blue_circle, a). object(red_square, a). is(big_blue_circle, below, red_square). block(b). object(small_blue_circle, b). object(yellow_square, b). is(small_blue_circle, left, yellow_square). is(a, top, b).\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['B']",
    "asp_result": "satisfiable, but no query results"
  },
  {
    "context": "There is a block called A. It has a big blue circle and a red square. The big blue circle is below the red square. There is another block called B Which is above block A. There are a small blue circle and a yellow square in this block. The small blue circle is to the left of the yellow square.",
    "question": "Which block has a square above a circle?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b). object(big_blue_circle, a). object(red_square, a). object(small_blue_circle, b). object(yellow_square, b). is(big_blue_circle, below, red_square). is(small_blue_circle, left, yellow_square). is(a, top, b).\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['A', ' B']",
    "asp_result": "satisfiable, but no query results"
  },
  {
    "context": "There is three blocks called A, B, C. Block A has two big blue shapes to the left of a big yellow triangle. There is also a little triangle to the left of blue objects. there is a big black triangle touching the bottom edge of block B. A medium circle is at top of the block B and a small blue circle is near to it. Block C is left to the blocks A and B. It has two medium triangles. one of them is to the right of the other.",
    "question": "Which blocks have blue thing above a big shape?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(big_blue_shape_1, a). object(big_blue_shape_2, a). object(big_yellow_triangle, a). object(little_triangle, a). object(big_black_triangle, b). object(medium_circle, b). object(small_blue_circle, b). object(medium_triangle_1, c). object(medium_triangle_2, c). is(big_blue_shape_1, left, big_yellow_triangle). is(big_blue_shape_2, left, big_yellow_triangle). is(big_blue_shape_1, left, little_triangle). is(big_blue_shape_2, left, little_triangle). is(big_yellow_triangle, left, little_triangle). is(big_black_triangle, touching, bottom_edge_b). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_blue_shape_1, above, big_yellow_triangle). is(big_blue_shape_2, above, big_yellow_triangle). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_blue_shape_1, above, little_triangle). is(big_blue_shape_2, above, little_triangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_blue_shape_1, above, little_triangle). is(big_blue_shape_2, above, little_triangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_blue_shape_1, above, little_triangle). is(big_blue_shape_2, above, little_triangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_blue_shape_1, above, little_triangle). is(big_blue_shape_2, above, little_triangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_blue_shape_1, above, little_triangle). is(big_blue_shape_2, above, little_triangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_blue_shape_1, above, little_triangle). is(big_blue_shape_2, above, little_triangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_blue_shape_1, above, little_triangle). is(big_blue_shape_2, above, little_triangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_blue_shape_1, above, little_triangle). is(big_blue_shape_2, above, little_triangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_blue_shape_1, above, little_triangle). is(big_blue_shape_2, above, little_triangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_blue_shape_1, above, little_triangle). is(big_blue_shape_2, above, little_triangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_blue_shape_1, above, little_triangle). is(big_blue_shape_2, above, little_triangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_blue_shape_1, above, little_triangle). is(big_blue_shape_2, above, little_triangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_blue_shape_1, above, little_triangle). is(big_blue_shape_2, above, little_triangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_blue_shape_1, above, little_triangle). is(big_blue_shape_2, above, little triangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_blue_shape_1, above, little_triangle). is(big_blue_shape_2, above, little_triangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_blue_shape_1, above, little_triangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, littletriangle). is(big_blue_shape_1, above, littletriangle). is(big_blue_shape_2, above, littletriangle). is(big_blue_shape_1, above, big_blue_shape_2). is(big_blue_shape_2, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['B']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There is three blocks called A, B, C. Block A has two big blue shapes to the left of a big yellow triangle. There is also a little triangle to the left of blue objects. there is a big black triangle touching the bottom edge of block B. A medium circle is at top of the block B and a small blue circle is near to it. Block C is left to the blocks A and B. It has two medium triangles. one of them is to the right of the other.",
    "question": "Which block has a triangle to the left of and right of a blue object?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(big_blue_shape_1, a). object(big_blue_shape_2, a). object(big_yellow_triangle, a). object(little_triangle, a). object(big_black_triangle, b). object(medium_circle, b). object(small_blue_circle, b). object(medium_triangle_1, c). object(medium_triangle_2, c). is(big_blue_shape_1, left, big_yellow_triangle). is(big_blue_shape_2, left, big_yellow_triangle). is(little_triangle, left, big_blue_shape_1). is(big_blue_shape_1, left, big_blue_shape_2). is(big_yellow_triangle, right, big_blue_shape_1). is(big_yellow_triangle, right, big_blue_shape_2). is(big_yellow_triangle, right, little_triangle). is(big_black_triangle, touching, bottom_edge_b). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edge_a). is(big_yellow_triangle, touching, top_edge_a). is(big_blue_shape_1, touching, top_edge_a). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top_edgea). is(big_yellow_triangle, touching, top_edgea). is(big_blue_shape_1, touching, top_edgea). is(big_blue_shape_2, touching, top\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['A']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There is three blocks called A, B, C. Block A has two big blue shapes to the left of a big yellow triangle. There is also a little triangle to the left of blue objects. there is a big black triangle touching the bottom edge of block B. A medium circle is at top of the block B and a small blue circle is near to it. Block C is left to the blocks A and B. It has two medium triangles. one of them is to the right of the other.",
    "question": "Which block has a triangle to the left of another triangle?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(big_blue_shape_1, a). object(big_blue_shape_2, a). object(big_yellow_triangle, a). object(little_triangle, a). object(big_black_triangle, b). object(medium_circle, b). object(small_blue_circle, b). object(medium_triangle_1, c). object(medium_triangle_2, c). is(big_blue_shape_1, left, big_yellow_triangle). is(big_blue_shape_2, left, big_yellow_triangle). is(little_triangle, left, big_yellow_triangle). is(big_yellow_triangle, touching, bottom_edge_a). is(big_black_triangle, touching, bottom_edge_b). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium_circle). is(big_yellow_triangle, above, small_blue_circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium_circle). is(big_yellow_triangle, above, small_blue_circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium_circle). is(big_yellow_triangle, above, small_blue_circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium_circle). is(big_yellow_triangle, above, small_blue_circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium_circle). is(big_yellow_triangle, above, small_blue_circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium_circle). is(big_yellow_triangle, above, small_blue_circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium_circle). is(big_yellow_triangle, above, small_blue_circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium_circle). is(big_yellow_triangle, above, small_blue_circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium_circle). is(big_yellow_triangle, above, small_blue_circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium_circle). is(big_yellow_triangle, above, small_blue_circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium_circle). is(big_yellow_triangle, above, small_blue_circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium_circle). is(big_yellow_triangle, above, small_blue_circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium_circle). is(big_yellow_triangle, above, small_blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium_circle). is(big_yellow_triangle, above, small_blue_circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium_circle). is(big_yellow_triangle, above, small_blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium_circle). is(big_yellow_triangle, above, small_blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium_circle). is(big_yellow_triangle, above, small_blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium circle). is(big_yellow_triangle, above, small_blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium circle). is(big_yellow_triangle, above, small blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium circle). is(big_yellow_triangle, above, small blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium circle). is(big_yellow_triangle, above, small blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium circle). is(big_yellow_triangle, above, small blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium circle). is(big_yellow_triangle, above, small blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium circle). is(big_yellow_triangle, above, small blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium circle). is(big_yellow_triangle, above, small blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium circle). is(big_yellow_triangle, above, small blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium circle). is(big_yellow_triangle, above, small blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium circle). is(big_yellow_triangle, above, small blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium circle). is(big_yellow_triangle, above, small blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium circle). is(big_yellow_triangle, above, small blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium circle). is(big_yellow_triangle, above, small blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium circle). is(big_yellow_triangle, above, small blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium circle). is(big_yellow_triangle, above, small blue circle). is(big_yellow_triangle, above, medium_triangle_1). is(big_yellow_triangle, above, medium_triangle_2). is(big_yellow_triangle, above, a). is(big_yellow_triangle, above, b). is(big_yellow_triangle, above, c). is(big_yellow_triangle, above, big_blue_shape_1). is(big_yellow_triangle, above, big_blue_shape_2). is(big_yellow_triangle, above, little_triangle). is(big_yellow_triangle, above, big_black_triangle). is(big_yellow_triangle, above, medium circle). is(big_yellow_triangle, above, small blue circle). is(big\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['A', 'C']",
    "asp_result": "Error: too many messages."
  },
  {
    "context": "There is three blocks called A, B, C. Block A has two big blue shapes to the left of a big yellow triangle. There is also a little triangle to the left of blue objects. there is a big black triangle touching the bottom edge of block B. A medium circle is at top of the block B and a small blue circle is near to it. Block C is left to the blocks A and B. It has two medium triangles. one of them is to the right of the other.",
    "question": "Which block has a triangle to the right of another triangle?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(big_blue_shape_1, a). object(big_blue_shape_2, a). object(big_yellow_triangle, a). object(little_triangle, a). object(big_black_triangle, b). object(medium_circle, b). object(small_blue_circle, b). object(medium_triangle_1, c). object(medium_triangle_2, c). is(big_blue_shape_1, left, big_yellow_triangle). is(big_blue_shape_2, left, big_yellow_triangle). is(big_blue_shape_1, left, little_triangle). is(big_blue_shape_2, left, little_triangle). is(big_yellow_triangle, left, little_triangle). is(big_black_triangle, touching, bottom_edge_b). is(medium_circle, above, big_black_triangle). is(small_blue_circle, near, medium_circle). is(medium_triangle_1, right, medium_triangle_2). is(c, left, a). is(c, left, b). is(a, top, b). is(b, top, c).\n\nQuery: query(Block) :- block(Block), object(Triangle1, Block), object(Triangle2, Block), is(Triangle1, right, Triangle2). #show query/1.\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['A', 'B', 'C']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There is three blocks called A, B, C. Block A has two big blue shapes to the left of a big yellow triangle. There is also a little triangle to the left of blue objects. there is a big black triangle touching the bottom edge of block B. A medium circle is at top of the block B and a small blue circle is near to it. Block C is left to the blocks A and B. It has two medium triangles. one of them is to the right of the other.",
    "question": "Which block has a blue shape above a triangle?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(big_blue_shape_1, a). object(big_blue_shape_2, a). object(big_yellow_triangle, a). object(little_triangle, a). object(big_black_triangle, b). object(medium_circle, b). object(small_blue_circle, b). object(medium_triangle_1, c). object(medium_triangle_2, c). is(big_blue_shape_1, left, big_yellow_triangle). is(big_blue_shape_2, left, big_yellow_triangle). is(big_blue_shape_1, left, little_triangle). is(big_blue_shape_2, left, little_triangle). is(big_yellow_triangle, left, little_triangle). is(big_black_triangle, touching, bottom_edge_b). is(medium_circle, above, big_black_triangle). is(small_blue_circle, near, medium_circle). is(medium_triangle_1, right, medium_triangle_2). is(c, left, a). is(c, left, b). is(a, top, b). is(b, top, c).\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.",
    "actual_answer": "['B']",
    "asp_result": "satisfiable, but no query results"
  },
  {
    "context": "There are three blocks A, B and C. A blue triangle is touching the right edge of block A. Block B has four objects. There is a medium black square at the top of this block. There is a big blue square at the top of this block and near to the medium square. Two big black circles are below these objects. one of the circles is touching the bottom edge of its block. block C is above A and block B is above it. Three medium blue triangles and two squares are in this block. the squares are below all triangles. two of the triangles and one of the squares are to the left of the  other square.",
    "question": "Which block has a triangle below a circle?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(blue_triangle, a). object(medium_black_square, b). object(big_blue_square, b). object(big_black_circle_1, b). object(big_black_circle_2, b). object(medium_blue_triangle_1, c). object(medium_blue_triangle_2, c). object(medium_blue_triangle_3, c). object(small_blue_square_1, c). object(small_blue_square_2, c). is(blue_triangle, touching, right_edge_a). is(big_blue_square, near, medium_black_square). is(big_black_circle_1, below, big_blue_square). is(big_black_circle_2, below, big_blue_square). is(big_black_circle_1, touching, bottom_edge_b). is(big_blue_square, above, big_black_circle_1). is(big_blue_square, above, big_black_circle_2). is(big_blue_square, above, medium_black_square). is(medium_blue_triangle_1, below, small_blue_square_1). is(medium_blue_triangle_2, below, small_blue_square_1). is(medium_blue_triangle_3, below, small_blue_square_2). is(small_blue_square_1, left, small_blue_square_2). is(small_blue_square_2, right, small_blue_square_1). is(small_blue_square_1, left, medium_blue_triangle_1). is(small_blue_square_1, left, medium_blue_triangle_2). is(small_blue_square_2, right, medium_blue_triangle_3). is(a, top, b). is(b, top, c). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c, top, b). is(c, top, a). is(c,\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['A', ' C']",
    "asp_result": "Error: parsing failed"
  },
  {
    "context": "There are three blocks A, B and C. A blue triangle is touching the right edge of block A. Block B has four objects. There is a medium black square at the top of this block. There is a big blue square at the top of this block and near to the medium square. Two big black circles are below these objects. one of the circles is touching the bottom edge of its block. block C is above A and block B is above it. Three medium blue triangles and two squares are in this block. the squares are below all triangles. two of the triangles and one of the squares are to the left of the  other square.",
    "question": "Which block has a square to the right of another square?",
    "q_type": "FB",
    "predicted_ASP": "block(a;b;c). object(blue_triangle, a). object(medium_black_square, b). object(big_blue_square, b). object(big_black_circle_1, b). object(big_black_circle_2, b). object(medium_blue_triangle_1, c). object(medium_blue_triangle_2, c). object(medium_blue_triangle_3, c). object(square_1, c). object(square_2, c). is(blue_triangle, touching, right_edge_a). is(big_blue_square, near, medium_black_square). is(big_black_circle_1, below, big_blue_square). is(big_black_circle_2, below, big_blue_square). is(big_black_circle_1, touching, bottom_edge_b). is(big_blue_square, above, big_black_circle_1). is(big_blue_square, above, big_black_circle_2). is(big_blue_square, above, medium_black_square). is(square_1, below, medium_blue_triangle_1). is(square_1, below, medium_blue_triangle_2). is(square_1, below, medium_blue_triangle_3). is(square_2, left, square_1). is(square_2, left, medium_blue_triangle_1). is(square_2, left, medium_blue_triangle_2). is(square_2, left, medium_blue_triangle_3). is(square_2, left, square_1). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2). is(square_1, right, medium_blue_triangle_1). is(square_1, right, medium_blue_triangle_2). is(square_1, right, medium_blue_triangle_3). is(square_1, right, square_2\n        % Inverse relations\n        inverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near).\n        is(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2),X != Y.\n        % Symmetric relations\n        symmetric(touching; disconnected; overlapping; adjacent; near; far).\n        is(Y, R, X) :- is(X, R, Y), symmetric(R),X != Y.\n        % transitive relations\n        transitive(above; below; left; right; front; behind).\n        is(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\n        % Inter-block object relations\n        is(O1, R, O2) :- object(O1, B1), object(O2, B2), is(B1, R, B2), O1 != O2,B1 !=B2.\n        % Intra-block object relations\n        is(O1, R, O2) :- object(O1,Block), object(O2, Block), is(O1, R, O2), O1 != O2.#show query/1.",
    "actual_answer": "['C']",
    "asp_result": "Error: parsing failed"
  }
]