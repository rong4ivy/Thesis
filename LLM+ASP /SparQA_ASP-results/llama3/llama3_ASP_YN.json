[
  {
    "context": "There is a block called A. In A there is a red triangle Which is above a black circle. The black circle is touching the bottom of A. A yellow square is touching the top edge of A and below that there is a red oval is touching the right edge of A. There is a second block call B Which is to the left of A. Inside B there are 3 squares, a brown one, a green one, and a red one. The green square is above the red square and touching the left edge of B. The brown square is touching both the bottom edge and the right edge of B. The red square is touching the left edge of the brown square.",
    "question": "Is the oval to the right of the brown thing?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nobject(red_triangle, unknown, red, triangle, a).\nobject(black_circle, unknown, black, circle, a).\nobject(yellow_square, unknown, yellow, square, a).\nobject(red_oval, unknown, red, oval, a).\nobject(brown_square, unknown, brown, square, b).\nobject(green_square, unknown, green, square, b).\nobject(red_square, unknown, red, square, b).\nis(red_triangle, above, black_circle).\nis(black_circle, touching, a).\nis(yellow_square, touching, a).\nis(red_oval, touching, a).\nis(a, left, b).\nis(green_square, above, red_square).\nis(green_square, touching, b).\nis(brown_square, touching, b).\nis(brown_square, touching, b).\nis(red_square, touching, brown_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(red_oval, _, _, _, _), object(brown_square, _, _, _, _), is(red_oval, right, brown_square).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['Yes']",
    "clean_asp": "block(a).\nblock(b).\nobject(red_triangle, unknown, red, triangle, a).\nobject(black_circle, unknown, black, circle, a).\nobject(yellow_square, unknown, yellow, square, a).\nobject(red_oval, unknown, red, oval, a).\nobject(brown_square, unknown, brown, square, b).\nobject(green_square, unknown, green, square, b).\nobject(red_square, unknown, red, square, b).\nis(red_triangle, above, black_circle).\nis(black_circle, touching, a).\nis(yellow_square, touching, a).\nis(red_oval, touching, a).\nis(a, left, b).\nis(green_square, above, red_square).\nis(green_square, touching, b).\nis(brown_square, touching, b).\nis(brown_square, touching, b).\nis(red_square, touching, brown_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(red_oval, _, _, _, _), object(brown_square, _, _, _, _), is(red_oval, right, brown_square).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "no"
  },
  {
    "context": "There is a block called A. In A there is a red triangle Which is above a black circle. The black circle is touching the bottom of A. A yellow square is touching the top edge of A and below that there is a red oval is touching the right edge of A. There is a second block call B Which is to the left of A. Inside B there are 3 squares, a brown one, a green one, and a red one. The green square is above the red square and touching the left edge of B. The brown square is touching both the bottom edge and the right edge of B. The red square is touching the left edge of the brown square.",
    "question": "Are all of the squares in B?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nobject(red_triangle, unknown, red, triangle, a).\nobject(black_circle, unknown, black, circle, a).\nobject(yellow_square, unknown, yellow, square, a).\nobject(red_oval, unknown, red, oval, a).\nobject(brown_square, unknown, brown, square, b).\nobject(green_square, unknown, green, square, b).\nobject(red_square, unknown, red, square, b).\nis(red_triangle, above, black_circle).\nis(black_circle, touching, a).\nis(yellow_square, touching, a).\nis(red_oval, touching, a).\nis(a, left, b).\nis(green_square, above, red_square).\nis(green_square, touching, b).\nis(brown_square, touching, b).\nis(brown_square, touching, b).\nis(red_square, touching, brown_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(O, _, _, square, b) : object(O, _, _, _, b).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['No']",
    "clean_asp": "block(a).\nblock(b).\nobject(red_triangle, unknown, red, triangle, a).\nobject(black_circle, unknown, black, circle, a).\nobject(yellow_square, unknown, yellow, square, a).\nobject(red_oval, unknown, red, oval, a).\nobject(brown_square, unknown, brown, square, b).\nobject(green_square, unknown, green, square, b).\nobject(red_square, unknown, red, square, b).\nis(red_triangle, above, black_circle).\nis(black_circle, touching, a).\nis(yellow_square, touching, a).\nis(red_oval, touching, a).\nis(a, left, b).\nis(green_square, above, red_square).\nis(green_square, touching, b).\nis(brown_square, touching, b).\nis(brown_square, touching, b).\nis(red_square, touching, brown_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(O, _, _, square, b) : object(O, _, _, _, b).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "yes"
  },
  {
    "context": "There is a block called A. In A there is a red triangle Which is above a black circle. The black circle is touching the bottom of A. A yellow square is touching the top edge of A and below that there is a red oval is touching the right edge of A. There is a second block call B Which is to the left of A. Inside B there are 3 squares, a brown one, a green one, and a red one. The green square is above the red square and touching the left edge of B. The brown square is touching both the bottom edge and the right edge of B. The red square is touching the left edge of the brown square.",
    "question": "Is the red square above the green square?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nobject(red_triangle, unknown, red, triangle, a).\nobject(black_circle, unknown, black, circle, a).\nobject(yellow_square, unknown, yellow, square, a).\nobject(red_oval, unknown, red, oval, a).\nobject(brown_square, unknown, brown, square, b).\nobject(green_square, unknown, green, square, b).\nobject(red_square, unknown, red, square, b).\nis(red_triangle, above, black_circle).\nis(black_circle, touching, a).\nis(yellow_square, touching, a).\nis(red_oval, touching, a).\nis(a, left, b).\nis(green_square, above, red_square).\nis(green_square, touching, b).\nis(brown_square, touching, b).\nis(brown_square, touching, b).\nis(red_square, touching, brown_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(red_square, _, _, _, _), object(green_square, _, _, _, _), is(red_square, above, green_square).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['No']",
    "clean_asp": "block(a).\nblock(b).\nobject(red_triangle, unknown, red, triangle, a).\nobject(black_circle, unknown, black, circle, a).\nobject(yellow_square, unknown, yellow, square, a).\nobject(red_oval, unknown, red, oval, a).\nobject(brown_square, unknown, brown, square, b).\nobject(green_square, unknown, green, square, b).\nobject(red_square, unknown, red, square, b).\nis(red_triangle, above, black_circle).\nis(black_circle, touching, a).\nis(yellow_square, touching, a).\nis(red_oval, touching, a).\nis(a, left, b).\nis(green_square, above, red_square).\nis(green_square, touching, b).\nis(brown_square, touching, b).\nis(brown_square, touching, b).\nis(red_square, touching, brown_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(red_square, _, _, _, _), object(green_square, _, _, _, _), is(red_square, above, green_square).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "no"
  },
  {
    "context": "There are three blocks called A, B, and C. A is on top of B and B is on top of C. In A there are 3 circles: a small red one, a green one, and a big blue one. The small red and green circles are above the big blue circle. The big blue circle is touching the bottom edge of A, and the green circle is touching the top edge of A. In B there is a orange triangle, Which is above a purple rectangle. The purple rectangle is touching the bottom edge of B. In C, there are 3 squares, a small white one, a small black one, and a large yellow one. The small white square is touching the left edge of C, while the small black square is touching the right edge of C. The large yellow square is adjacent to the white square, and is touching the bottom edge of C.",
    "question": "Is a circle below a rectangle?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(small_red_circle, small, red, circle, a).\nobject(green_circle, _, green, circle, a).\nobject(big_blue_circle, big, blue, circle, a).\nobject(orange_triangle, _, orange, triangle, b).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(small_white_square, small, white, square, c).\nobject(small_black_square, small, black, square, c).\nobject(large_yellow_square, large, yellow, square, c).\nis(a, above, b).\nis(b, above, c).\nis(small_red_circle, above, big_blue_circle).\nis(green_circle, above, big_blue_circle).\nis(big_blue_circle, touching, a).\nis(green_circle, touching, a).\nis(orange_triangle, above, purple_rectangle).\nis(purple_rectangle, touching, b).\nis(small_white_square, touching, c).\nis(small_black_square, touching, c).\nis(large_yellow_square, touching, c).\nis(small_white_square, adjacent, large_yellow_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(Circle, _, _, circle, _), object(Rectangle, _, _, rectangle, _), is(Circle, below, Rectangle).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['No']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(small_red_circle, small, red, circle, a).\nobject(green_circle, unknown, green, circle, a).\nobject(big_blue_circle, big, blue, circle, a).\nobject(orange_triangle, unknown, orange, triangle, b).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(small_white_square, small, white, square, c).\nobject(small_black_square, small, black, square, c).\nobject(large_yellow_square, large, yellow, square, c).\nis(a, above, b).\nis(b, above, c).\nis(small_red_circle, above, big_blue_circle).\nis(green_circle, above, big_blue_circle).\nis(big_blue_circle, touching, a).\nis(green_circle, touching, a).\nis(orange_triangle, above, purple_rectangle).\nis(purple_rectangle, touching, b).\nis(small_white_square, touching, c).\nis(small_black_square, touching, c).\nis(large_yellow_square, touching, c).\nis(small_white_square, left, small_black_square).\nis(large_yellow_square, adjacent, small_white_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(small_red_circle, _, _, _, _), object(small_white_square, _, _, _, _), is(small_red_circle, above, small_white_square).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "no"
  },
  {
    "context": "There are three blocks called A, B, and C. A is on top of B and B is on top of C. In A there are 3 circles: a small red one, a green one, and a big blue one. The small red and green circles are above the big blue circle. The big blue circle is touching the bottom edge of A, and the green circle is touching the top edge of A. In B there is a orange triangle, Which is above a purple rectangle. The purple rectangle is touching the bottom edge of B. In C, there are 3 squares, a small white one, a small black one, and a large yellow one. The small white square is touching the left edge of C, while the small black square is touching the right edge of C. The large yellow square is adjacent to the white square, and is touching the bottom edge of C.",
    "question": "Is the red circle above the white square?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(small_red_circle, small, red, circle, a).\nobject(green_circle, _, green, circle, a).\nobject(big_blue_circle, big, blue, circle, a).\nobject(orange_triangle, _, orange, triangle, b).\nobject(purple_rectangle, _, purple, rectangle, b).\nobject(small_white_square, small, white, square, c).\nobject(small_black_square, small, black, square, c).\nobject(large_yellow_square, large, yellow, square, c).\nis(a, above, b).\nis(b, above, c).\nis(small_red_circle, above, big_blue_circle).\nis(green_circle, above, big_blue_circle).\nis(big_blue_circle, touching, a).\nis(green_circle, touching, a).\nis(orange_triangle, above, purple_rectangle).\nis(purple_rectangle, touching, b).\nis(small_white_square, touching, c).\nis(small_black_square, touching, c).\nis(large_yellow_square, touching, c).\nis(small_white_square, left, small_black_square).\nis(large_yellow_square, adjacent, small_white_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(small_red_circle, _, _, _, _), object(small_white_square, _, _, _, _), is(small_red_circle, above, small_white_square).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['Yes']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(small_red_circle, small, red, circle, a).\nobject(green_circle, unknown, green, circle, a).\nobject(big_blue_circle, big, blue, circle, a).\nobject(orange_triangle, unknown, orange, triangle, b).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(small_white_square, small, white, square, c).\nobject(small_black_square, small, black, square, c).\nobject(large_yellow_square, large, yellow, square, c).\nis(a, above, b).\nis(b, above, c).\nis(small_red_circle, above, big_blue_circle).\nis(green_circle, above, big_blue_circle).\nis(big_blue_circle, touching, a).\nis(green_circle, touching, a).\nis(orange_triangle, above, purple_rectangle).\nis(purple_rectangle, touching, b).\nis(small_white_square, touching, c).\nis(small_black_square, touching, c).\nis(large_yellow_square, touching, c).\nis(small_white_square, left, small_black_square).\nis(large_yellow_square, adjacent, small_white_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(small_red_circle, _, _, _, _), object(small_white_square, _, _, _, _), is(small_red_circle, above, small_white_square).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "yes"
  },
  {
    "context": "There are three blocks called A, B, and C. A is on top of B and B is on top of C. In A there are 3 circles: a small red one, a green one, and a big blue one. The small red and green circles are above the big blue circle. The big blue circle is touching the bottom edge of A, and the green circle is touching the top edge of A. In B there is a orange triangle, Which is above a purple rectangle. The purple rectangle is touching the bottom edge of B. In C, there are 3 squares, a small white one, a small black one, and a large yellow one. The small white square is touching the left edge of C, while the small black square is touching the right edge of C. The large yellow square is adjacent to the white square, and is touching the bottom edge of C.",
    "question": "Is the orange triangle below the black square?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(small_red_circle, small, red, circle, a).\nobject(green_circle, _, green, circle, a).\nobject(big_blue_circle, large, blue, circle, a).\nobject(orange_triangle, _, orange, triangle, b).\nobject(purple_rectangle, _, purple, rectangle, b).\nobject(small_white_square, small, white, square, c).\nobject(small_black_square, small, black, square, c).\nobject(large_yellow_square, large, yellow, square, c).\nis(a, above, b).\nis(b, above, c).\nis(small_red_circle, above, big_blue_circle).\nis(green_circle, above, big_blue_circle).\nis(big_blue_circle, touching, a).\nis(green_circle, touching, a).\nis(orange_triangle, above, purple_rectangle).\nis(purple_rectangle, touching, b).\nis(small_white_square, touching, c).\nis(small_black_square, touching, c).\nis(large_yellow_square, touching, c).\nis(small_white_square, left, small_black_square).\nis(large_yellow_square, adjacent, small_white_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(orange_triangle, _, _, _, _), object(small_black_square, _, _, _, _), is(orange_triangle, below, small_black_square).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['No']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(small_red_circle, small, red, circle, a).\nobject(green_circle, unknown, green, circle, a).\nobject(big_blue_circle, big, blue, circle, a).\nobject(orange_triangle, unknown, orange, triangle, b).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(small_white_square, small, white, square, c).\nobject(small_black_square, small, black, square, c).\nobject(large_yellow_square, large, yellow, square, c).\nis(a, above, b).\nis(b, above, c).\nis(small_red_circle, above, big_blue_circle).\nis(green_circle, above, big_blue_circle).\nis(big_blue_circle, touching, a).\nis(green_circle, touching, a).\nis(orange_triangle, above, purple_rectangle).\nis(purple_rectangle, touching, b).\nis(small_white_square, touching, c).\nis(small_black_square, touching, c).\nis(large_yellow_square, touching, c).\nis(small_white_square, left, small_black_square).\nis(large_yellow_square, adjacent, small_white_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(small_red_circle, _, _, _, _), object(small_white_square, _, _, _, _), is(small_red_circle, above, small_white_square).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "no"
  },
  {
    "context": "There is a block called A. Inside there's a red oval that is above a blue triangle. The blue triangle is touching the right edge of A and the top of a large black square. Touching the bottom edge of A is  a small orange square. The is a block called B Which is to the right and touching A. Inside B there are 5 triangles, a red one, a green one, a large yellow one, a brown one, and an orange one. The red and orange triangles are touching the left edge of B and the orange triangle is above the red triangle. The large yellow triangle is touching the top edge of B. The green triangle is touching the right edge of B. The brown triangle is below all of the other triangles and is touching the bottom of B.",
    "question": "Does B have all of the triangles?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nobject(red_oval, unknown, red, oval, a).\nobject(blue_triangle, unknown, blue, triangle, a).\nobject(black_square, large, black, square, a).\nobject(small_orange_square, small, orange, square, a).\nobject(red_triangle, unknown, red, triangle, b).\nobject(orange_triangle, unknown, orange, triangle, b).\nobject(large_yellow_triangle, large, yellow, triangle, b).\nobject(green_triangle, unknown, green, triangle, b).\nobject(brown_triangle, unknown, brown, triangle, b).\nis(red_oval, above, blue_triangle).\nis(blue_triangle, touching, black_square).\nis(blue_triangle, touching, a).\nis(small_orange_square, touching, a).\nis(b, right, a).\nis(b, touching, a).\nis(red_triangle, touching, b).\nis(orange_triangle, touching, b).\nis(orange_triangle, above, red_triangle).\nis(large_yellow_triangle, touching, b).\nis(green_triangle, touching, b).\nis(brown_triangle, touching, b).\nis(brown_triangle, below, red_triangle).\nis(brown_triangle, below, orange_triangle).\nis(brown_triangle, below, large_yellow_triangle).\nis(brown_triangle, below, green_triangle).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- block(b), object(T, _, _, triangle, b) : object(T, _, _, _, b).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['No']",
    "clean_asp": "block(a).\nblock(b).\nobject(red_oval, unknown, red, oval, a).\nobject(blue_triangle, unknown, blue, triangle, a).\nobject(black_square, large, black, square, a).\nobject(small_orange_square, small, orange, square, a).\nobject(red_triangle, unknown, red, triangle, b).\nobject(orange_triangle, unknown, orange, triangle, b).\nobject(large_yellow_triangle, large, yellow, triangle, b).\nobject(green_triangle, unknown, green, triangle, b).\nobject(brown_triangle, unknown, brown, triangle, b).\nis(red_oval, above, blue_triangle).\nis(blue_triangle, touching, black_square).\nis(blue_triangle, touching, a).\nis(small_orange_square, touching, a).\nis(b, right, a).\nis(b, touching, a).\nis(red_triangle, touching, b).\nis(orange_triangle, touching, b).\nis(orange_triangle, above, red_triangle).\nis(large_yellow_triangle, touching, b).\nis(green_triangle, touching, b).\nis(brown_triangle, touching, b).\nis(brown_triangle, below, red_triangle).\nis(brown_triangle, below, orange_triangle).\nis(brown_triangle, below, large_yellow_triangle).\nis(brown_triangle, below, green_triangle).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- block(b), object(T, _, _, triangle, b) : object(T, _, _, _, b).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "yes"
  },
  {
    "context": "There is a block called A. Inside there's a red oval that is above a blue triangle. The blue triangle is touching the right edge of A and the top of a large black square. Touching the bottom edge of A is  a small orange square. The is a block called B Which is to the right and touching A. Inside B there are 5 triangles, a red one, a green one, a large yellow one, a brown one, and an orange one. The red and orange triangles are touching the left edge of B and the orange triangle is above the red triangle. The large yellow triangle is touching the top edge of B. The green triangle is touching the right edge of B. The brown triangle is below all of the other triangles and is touching the bottom of B.",
    "question": "Is the yellow triangle above the red triangle?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nobject(red_oval, unknown, red, oval, a).\nobject(blue_triangle, unknown, blue, triangle, a).\nobject(large_black_square, large, black, square, a).\nobject(small_orange_square, small, orange, square, a).\nobject(red_triangle, unknown, red, triangle, b).\nobject(orange_triangle, unknown, orange, triangle, b).\nobject(large_yellow_triangle, large, yellow, triangle, b).\nobject(green_triangle, unknown, green, triangle, b).\nobject(brown_triangle, unknown, brown, triangle, b).\nis(red_oval, above, blue_triangle).\nis(blue_triangle, touching, large_black_square).\nis(blue_triangle, touching, a).\nis(small_orange_square, touching, a).\nis(b, right, a).\nis(b, touching, a).\nis(red_triangle, touching, b).\nis(orange_triangle, touching, b).\nis(orange_triangle, above, red_triangle).\nis(large_yellow_triangle, touching, b).\nis(green_triangle, touching, b).\nis(brown_triangle, touching, b).\nis(brown_triangle, below, red_triangle).\nis(brown_triangle, below, orange_triangle).\nis(brown_triangle, below, large_yellow_triangle).\nis(brown_triangle, below, green_triangle).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(large_yellow_triangle, large, yellow, triangle, _), object(red_triangle, _, red, triangle, _), is(large_yellow_triangle, above, red_triangle).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['Yes']",
    "clean_asp": "block(a).\nblock(b).\nobject(red_oval, unknown, red, oval, a).\nobject(blue_triangle, unknown, blue, triangle, a).\nobject(large_black_square, large, black, square, a).\nobject(small_orange_square, small, orange, square, a).\nobject(red_triangle, unknown, red, triangle, b).\nobject(orange_triangle, unknown, orange, triangle, b).\nobject(large_yellow_triangle, large, yellow, triangle, b).\nobject(green_triangle, unknown, green, triangle, b).\nobject(brown_triangle, unknown, brown, triangle, b).\nis(red_oval, above, blue_triangle).\nis(blue_triangle, touching, large_black_square).\nis(blue_triangle, touching, a).\nis(small_orange_square, touching, a).\nis(b, right, a).\nis(b, touching, a).\nis(red_triangle, touching, b).\nis(orange_triangle, touching, b).\nis(orange_triangle, above, red_triangle).\nis(large_yellow_triangle, touching, b).\nis(green_triangle, touching, b).\nis(brown_triangle, touching, b).\nis(brown_triangle, below, red_triangle).\nis(brown_triangle, below, orange_triangle).\nis(brown_triangle, below, large_yellow_triangle).\nis(brown_triangle, below, green_triangle).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(large_yellow_triangle, large, yellow, triangle, _), object(red_triangle, _, red, triangle, _), is(large_yellow_triangle, above, red_triangle).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "no"
  },
  {
    "context": "There is a block called A. Inside there's a red oval that is above a blue triangle. The blue triangle is touching the right edge of A and the top of a large black square. Touching the bottom edge of A is  a small orange square. The is a block called B Which is to the right and touching A. Inside B there are 5 triangles, a red one, a green one, a large yellow one, a brown one, and an orange one. The red and orange triangles are touching the left edge of B and the orange triangle is above the red triangle. The large yellow triangle is touching the top edge of B. The green triangle is touching the right edge of B. The brown triangle is below all of the other triangles and is touching the bottom of B.",
    "question": "Is the green thing above the yellow thing?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nobject(red_oval, unknown, red, oval, a).\nobject(blue_triangle, unknown, blue, triangle, a).\nobject(large_black_square, large, black, square, a).\nobject(small_orange_square, small, orange, square, a).\nobject(red_triangle, unknown, red, triangle, b).\nobject(orange_triangle, unknown, orange, triangle, b).\nobject(large_yellow_triangle, large, yellow, triangle, b).\nobject(green_triangle, unknown, green, triangle, b).\nobject(brown_triangle, unknown, brown, triangle, b).\nis(red_oval, above, blue_triangle).\nis(blue_triangle, touching, large_black_square).\nis(blue_triangle, touching, a).\nis(small_orange_square, touching, a).\nis(b, right, a).\nis(b, touching, a).\nis(red_triangle, touching, b).\nis(orange_triangle, touching, b).\nis(orange_triangle, above, red_triangle).\nis(large_yellow_triangle, touching, b).\nis(green_triangle, touching, b).\nis(brown_triangle, touching, b).\nis(brown_triangle, below, red_triangle).\nis(brown_triangle, below, orange_triangle).\nis(brown_triangle, below, large_yellow_triangle).\nis(brown_triangle, below, green_triangle).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(GreenThing, _, green, _, _), object(YellowThing, _, yellow, _, _), is(GreenThing, above, YellowThing).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['No']",
    "clean_asp": "block(a).\nblock(b).\nobject(red_oval, unknown, red, oval, a).\nobject(blue_triangle, unknown, blue, triangle, a).\nobject(large_black_square, large, black, square, a).\nobject(small_orange_square, small, orange, square, a).\nobject(red_triangle, unknown, red, triangle, b).\nobject(orange_triangle, unknown, orange, triangle, b).\nobject(large_yellow_triangle, large, yellow, triangle, b).\nobject(green_triangle, unknown, green, triangle, b).\nobject(brown_triangle, unknown, brown, triangle, b).\nis(red_oval, above, blue_triangle).\nis(blue_triangle, touching, large_black_square).\nis(blue_triangle, touching, a).\nis(small_orange_square, touching, a).\nis(b, right, a).\nis(b, touching, a).\nis(red_triangle, touching, b).\nis(orange_triangle, touching, b).\nis(orange_triangle, above, red_triangle).\nis(large_yellow_triangle, touching, b).\nis(green_triangle, touching, b).\nis(brown_triangle, touching, b).\nis(brown_triangle, below, red_triangle).\nis(brown_triangle, below, orange_triangle).\nis(brown_triangle, below, large_yellow_triangle).\nis(brown_triangle, below, green_triangle).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(GreenThing, _, green, _, _), object(YellowThing, _, yellow, _, _), is(GreenThing, above, YellowThing).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "no"
  },
  {
    "context": "There are three blocks called A, B, and C. B is to the right of and touching the right edge of A and C is above and touching the top of B. In A, there is a blue square touching the left edge of A. A red triangle is next to the blue square and is above a yellow circle is touching the bottom edge of A. In B, there is a purple rectangle and an orange oval. The orange oval is touching the right edge of B and the rectangle is near and to the left of and the oval. In C, there is a small triangle a large triangle and a pink triangle. The small triangle is above the large triangle and is touching the top of C. The pink triangle is touching the bottom of C, with the large triangle to the right of the pink triangle.",
    "question": "Does A have only triangles?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(blue_square, unknown, blue, square, a).\nobject(red_triangle, unknown, red, triangle, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(orange_oval, unknown, orange, oval, b).\nobject(small_triangle, small, unknown, triangle, c).\nobject(large_triangle, large, unknown, triangle, c).\nobject(pink_triangle, unknown, pink, triangle, c).\nis(blue_square, touching, a).\nis(red_triangle, above, blue_square).\nis(yellow_circle, touching, a).\nis(orange_oval, touching, b).\nis(purple_rectangle, near, orange_oval).\nis(purple_rectangle, left, orange_oval).\nis(small_triangle, above, large_triangle).\nis(small_triangle, touching, c).\nis(large_triangle, right, pink_triangle).\nis(pink_triangle, touching, c).\nis(b, right, a).\nis(b, touching, a).\nis(c, above, b).\nis(c, touching, b).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- block(a), not object(_, _, _, triangle, a).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['No']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(blue_square, unknown, blue, square, a).\nobject(red_triangle, unknown, red, triangle, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(orange_oval, unknown, orange, oval, b).\nobject(small_triangle, small, unknown, triangle, c).\nobject(large_triangle, large, unknown, triangle, c).\nobject(pink_triangle, unknown, pink, triangle, c).\nis(blue_square, touching, a).\nis(red_triangle, above, blue_square).\nis(yellow_circle, touching, a).\nis(orange_oval, touching, b).\nis(purple_rectangle, near, orange_oval).\nis(purple_rectangle, left, orange_oval).\nis(small_triangle, above, large_triangle).\nis(small_triangle, touching, c).\nis(large_triangle, right, pink_triangle).\nis(pink_triangle, touching, c).\nis(b, right, a).\nis(b, touching, a).\nis(c, above, b).\nis(c, touching, b).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- block(a), not object(_, _, _, triangle, a).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "no"
  },
  {
    "context": "There are three blocks called A, B, and C. B is to the right of and touching the right edge of A and C is above and touching the top of B. In A, there is a blue square touching the left edge of A. A red triangle is next to the blue square and is above a yellow circle is touching the bottom edge of A. In B, there is a purple rectangle and an orange oval. The orange oval is touching the right edge of B and the rectangle is near and to the left of and the oval. In C, there is a small triangle a large triangle and a pink triangle. The small triangle is above the large triangle and is touching the top of C. The pink triangle is touching the bottom of C, with the large triangle to the right of the pink triangle.",
    "question": "Is the pink thing below the orange thing?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(blue_square, unknown, blue, square, a).\nobject(red_triangle, unknown, red, triangle, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(orange_oval, unknown, orange, oval, b).\nobject(small_triangle, small, unknown, triangle, c).\nobject(large_triangle, large, unknown, triangle, c).\nobject(pink_triangle, unknown, pink, triangle, c).\nis(blue_square, touching, a).\nis(red_triangle, above, blue_square).\nis(yellow_circle, touching, a).\nis(red_triangle, above, yellow_circle).\nis(purple_rectangle, near, orange_oval).\nis(purple_rectangle, left, orange_oval).\nis(orange_oval, touching, b).\nis(small_triangle, above, large_triangle).\nis(small_triangle, touching, c).\nis(large_triangle, right, pink_triangle).\nis(pink_triangle, touching, c).\nis(b, right, a).\nis(b, touching, a).\nis(c, above, b).\nis(c, touching, b).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(Pink, _, pink, _, _), object(Orange, _, orange, _, _), is(Pink, below, Orange).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['No']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(blue_square, unknown, blue, square, a).\nobject(red_triangle, unknown, red, triangle, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(orange_oval, unknown, orange, oval, b).\nobject(small_triangle, small, unknown, triangle, c).\nobject(large_triangle, large, unknown, triangle, c).\nobject(pink_triangle, unknown, pink, triangle, c).\nis(blue_square, touching, a).\nis(red_triangle, above, blue_square).\nis(yellow_circle, touching, a).\nis(red_triangle, above, yellow_circle).\nis(purple_rectangle, near, orange_oval).\nis(purple_rectangle, left, orange_oval).\nis(orange_oval, touching, b).\nis(small_triangle, above, large_triangle).\nis(small_triangle, touching, c).\nis(large_triangle, right, pink_triangle).\nis(pink_triangle, touching, c).\nis(b, right, a).\nis(b, touching, a).\nis(c, above, b).\nis(c, touching, b).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(Pink, _, pink, _, _), object(Orange, _, orange, _, _), is(Pink, below, Orange).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "no"
  },
  {
    "context": "There are three blocks called A, B, and C. B is to the right of and touching the right edge of A and C is above and touching the top of B. In A, there is a blue square touching the left edge of A. A red triangle is next to the blue square and is above a yellow circle is touching the bottom edge of A. In B, there is a purple rectangle and an orange oval. The orange oval is touching the right edge of B and the rectangle is near and to the left of and the oval. In C, there is a small triangle a large triangle and a pink triangle. The small triangle is above the large triangle and is touching the top of C. The pink triangle is touching the bottom of C, with the large triangle to the right of the pink triangle.",
    "question": "Is there an object to the left of the red thing?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(blue_square, unknown, blue, square, a).\nobject(red_triangle, unknown, red, triangle, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(orange_oval, unknown, orange, oval, b).\nobject(small_triangle, small, unknown, triangle, c).\nobject(large_triangle, large, unknown, triangle, c).\nobject(pink_triangle, unknown, pink, triangle, c).\nis(blue_square, touching, a).\nis(blue_square, left, a).\nis(red_triangle, above, blue_square).\nis(yellow_circle, touching, a).\nis(yellow_circle, below, blue_square).\nis(purple_rectangle, near, orange_oval).\nis(purple_rectangle, left, orange_oval).\nis(orange_oval, touching, b).\nis(orange_oval, right, b).\nis(small_triangle, above, large_triangle).\nis(small_triangle, touching, c).\nis(large_triangle, right, pink_triangle).\nis(pink_triangle, touching, c).\nis(b, right, a).\nis(b, touching, a).\nis(c, above, b).\nis(c, touching, b).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(RedObj, _, red, _, _), object(OtherObj, _, _, _, _), is(OtherObj, left, RedObj).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['Yes']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(blue_square, unknown, blue, square, a).\nobject(red_triangle, unknown, red, triangle, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(orange_oval, unknown, orange, oval, b).\nobject(small_triangle, small, unknown, triangle, c).\nobject(large_triangle, large, unknown, triangle, c).\nobject(pink_triangle, unknown, pink, triangle, c).\nis(blue_square, touching, a).\nis(blue_square, left, a).\nis(red_triangle, above, blue_square).\nis(yellow_circle, touching, a).\nis(yellow_circle, below, blue_square).\nis(purple_rectangle, near, orange_oval).\nis(purple_rectangle, left, orange_oval).\nis(orange_oval, touching, b).\nis(orange_oval, right, b).\nis(small_triangle, above, large_triangle).\nis(small_triangle, touching, c).\nis(large_triangle, right, pink_triangle).\nis(pink_triangle, touching, c).\nis(b, right, a).\nis(b, touching, a).\nis(c, above, b).\nis(c, touching, b).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(RedObj, _, red, _, _), object(OtherObj, _, _, _, _), is(OtherObj, left, RedObj).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "no"
  },
  {
    "context": "There are three blocks called A, B, and C. B is to the right of and touching the right edge of A and C is above and touching the top of B. In A, there is a blue square touching the left edge of A. A red triangle is next to the blue square and is above a yellow circle is touching the bottom edge of A. In B, there is a purple rectangle and an orange oval. The orange oval is touching the right edge of B and the rectangle is near and to the left of and the oval. In C, there is a small triangle a large triangle and a pink triangle. The small triangle is above the large triangle and is touching the top of C. The pink triangle is touching the bottom of C, with the large triangle to the right of the pink triangle.",
    "question": "Is the blue thing above the purple thing?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(blue_square, unknown, blue, square, a).\nobject(red_triangle, unknown, red, triangle, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(orange_oval, unknown, orange, oval, b).\nobject(small_triangle, small, unknown, triangle, c).\nobject(large_triangle, large, unknown, triangle, c).\nobject(pink_triangle, unknown, pink, triangle, c).\nis(blue_square, touching, a).\nis(blue_square, left, a).\nis(red_triangle, above, blue_square).\nis(yellow_circle, touching, a).\nis(yellow_circle, below, blue_square).\nis(purple_rectangle, near, orange_oval).\nis(purple_rectangle, left, orange_oval).\nis(orange_oval, touching, b).\nis(orange_oval, right, b).\nis(small_triangle, above, large_triangle).\nis(small_triangle, touching, c).\nis(pink_triangle, touching, c).\nis(pink_triangle, below, large_triangle).\nis(large_triangle, right, pink_triangle).\nis(b, right, a).\nis(b, touching, a).\nis(c, above, b).\nis(c, touching, b).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(BlueThing, _, blue, _, _), object(PurpleThing, _, purple, _, _), is(BlueThing, above, PurpleThing).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['DK']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(blue_square, unknown, blue, square, a).\nobject(red_triangle, unknown, red, triangle, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(orange_oval, unknown, orange, oval, b).\nobject(small_triangle, small, unknown, triangle, c).\nobject(large_triangle, large, unknown, triangle, c).\nobject(pink_triangle, unknown, pink, triangle, c).\nis(blue_square, touching, a).\nis(blue_square, left, a).\nis(red_triangle, above, blue_square).\nis(yellow_circle, touching, a).\nis(yellow_circle, below, blue_square).\nis(purple_rectangle, near, orange_oval).\nis(purple_rectangle, left, orange_oval).\nis(orange_oval, touching, b).\nis(orange_oval, right, b).\nis(small_triangle, above, large_triangle).\nis(small_triangle, touching, c).\nis(pink_triangle, touching, c).\nis(pink_triangle, below, large_triangle).\nis(large_triangle, right, pink_triangle).\nis(b, right, a).\nis(b, touching, a).\nis(c, above, b).\nis(c, touching, b).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(BlueThing, _, blue, _, _), object(PurpleThing, _, purple, _, _), is(BlueThing, above, PurpleThing).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "no"
  },
  {
    "context": "There are two blocks called A and B. A is to the right of B. In A, there is a blue triangle, Which is above a orange rectangle, Which is above a black circle. The black circle is touching the bottom of A. In B there are four squares. A yellow square is above a white square and to the left of a green square. A large purple square is touching the bottom of B and is to the left and near of the white square. The green square is on top of the purple square.",
    "question": "Is the blue thing above a black thing?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nobject(blue_triangle, unknown, blue, triangle, a).\nobject(orange_rectangle, unknown, orange, rectangle, a).\nobject(black_circle, unknown, black, circle, a).\nobject(yellow_square, unknown, yellow, square, b).\nobject(white_square, unknown, white, square, b).\nobject(green_square, unknown, green, square, b).\nobject(large_purple_square, large, purple, square, b).\nis(a, right, b).\nis(blue_triangle, above, orange_rectangle).\nis(orange_rectangle, above, black_circle).\nis(black_circle, touching, a).\nis(yellow_square, above, white_square).\nis(yellow_square, left, green_square).\nis(large_purple_square, touching, b).\nis(large_purple_square, left, white_square).\nis(large_purple_square, near, white_square).\nis(green_square, on, large_purple_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(BlueThing, _, blue, _, _), object(BlackThing, _, black, _, _), is(BlueThing, above, BlackThing).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['Yes']",
    "clean_asp": "block(a).\nblock(b).\nobject(blue_triangle, unknown, blue, triangle, a).\nobject(orange_rectangle, unknown, orange, rectangle, a).\nobject(black_circle, unknown, black, circle, a).\nobject(yellow_square, unknown, yellow, square, b).\nobject(white_square, unknown, white, square, b).\nobject(green_square, unknown, green, square, b).\nobject(large_purple_square, large, purple, square, b).\nis(a, right, b).\nis(blue_triangle, above, orange_rectangle).\nis(orange_rectangle, above, black_circle).\nis(black_circle, touching, a).\nis(yellow_square, above, white_square).\nis(yellow_square, left, green_square).\nis(large_purple_square, touching, b).\nis(large_purple_square, left, white_square).\nis(large_purple_square, near, white_square).\nis(green_square, on, large_purple_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(BlueThing, _, blue, _, _), object(BlackThing, _, black, _, _), is(BlueThing, above, BlackThing).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "yes"
  },
  {
    "context": "There are two blocks called A and B. A is to the right of B. In A, there is a blue triangle, Which is above a orange rectangle, Which is above a black circle. The black circle is touching the bottom of A. In B there are four squares. A yellow square is above a white square and to the left of a green square. A large purple square is touching the bottom of B and is to the left and near of the white square. The green square is on top of the purple square.",
    "question": "Is orange thing to the right of the white thing?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nobject(blue_triangle, unknown, blue, triangle, a).\nobject(orange_rectangle, unknown, orange, rectangle, a).\nobject(black_circle, unknown, black, circle, a).\nobject(yellow_square, unknown, yellow, square, b).\nobject(white_square, unknown, white, square, b).\nobject(green_square, unknown, green, square, b).\nobject(purple_square, large, purple, square, b).\nis(a, right, b).\nis(blue_triangle, above, orange_rectangle).\nis(orange_rectangle, above, black_circle).\nis(black_circle, touching, a).\nis(yellow_square, above, white_square).\nis(yellow_square, left, green_square).\nis(purple_square, touching, b).\nis(purple_square, left, white_square).\nis(purple_square, near, white_square).\nis(green_square, on, purple_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(OrangeThing, _, orange, _, _), object(WhiteThing, _, white, _, _), is(OrangeThing, right, WhiteThing).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['No']",
    "clean_asp": "block(a).\nblock(b).\nobject(blue_triangle, unknown, blue, triangle, a).\nobject(orange_rectangle, unknown, orange, rectangle, a).\nobject(black_circle, unknown, black, circle, a).\nobject(yellow_square, unknown, yellow, square, b).\nobject(white_square, unknown, white, square, b).\nobject(green_square, unknown, green, square, b).\nobject(purple_square, large, purple, square, b).\nis(a, right, b).\nis(blue_triangle, above, orange_rectangle).\nis(orange_rectangle, above, black_circle).\nis(black_circle, touching, a).\nis(yellow_square, above, white_square).\nis(yellow_square, left, green_square).\nis(purple_square, touching, b).\nis(purple_square, left, white_square).\nis(purple_square, near, white_square).\nis(green_square, on, purple_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(OrangeThing, _, orange, _, _), object(WhiteThing, _, white, _, _), is(OrangeThing, right, WhiteThing).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "yes"
  },
  {
    "context": "There are two blocks called A and B. A is to the right of B. In A, there is a blue triangle, Which is above a orange rectangle, Which is above a black circle. The black circle is touching the bottom of A. In B there are four squares. A yellow square is above a white square and to the left of a green square. A large purple square is touching the bottom of B and is to the left and near of the white square. The green square is on top of the purple square.",
    "question": "Is the green thing to the right of a yellow object?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nobject(blue_triangle, unknown, blue, triangle, a).\nobject(orange_rectangle, unknown, orange, rectangle, a).\nobject(black_circle, unknown, black, circle, a).\nobject(yellow_square, unknown, yellow, square, b).\nobject(white_square, unknown, white, square, b).\nobject(green_square, unknown, green, square, b).\nobject(purple_square, large, purple, square, b).\nis(a, right, b).\nis(blue_triangle, above, orange_rectangle).\nis(orange_rectangle, above, black_circle).\nis(black_circle, touching, a).\nis(yellow_square, above, white_square).\nis(yellow_square, left, green_square).\nis(purple_square, touching, b).\nis(purple_square, left, white_square).\nis(purple_square, near, white_square).\nis(green_square, on, purple_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(GreenObj, _, green, _, _), object(YellowObj, _, yellow, _, _), is(GreenObj, right, YellowObj).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['Yes']",
    "clean_asp": "block(a).\nblock(b).\nobject(blue_triangle, unknown, blue, triangle, a).\nobject(orange_rectangle, unknown, orange, rectangle, a).\nobject(black_circle, unknown, black, circle, a).\nobject(yellow_square, unknown, yellow, square, b).\nobject(white_square, unknown, white, square, b).\nobject(green_square, unknown, green, square, b).\nobject(purple_square, large, purple, square, b).\nis(a, right, b).\nis(blue_triangle, above, orange_rectangle).\nis(orange_rectangle, above, black_circle).\nis(black_circle, touching, a).\nis(yellow_square, above, white_square).\nis(yellow_square, left, green_square).\nis(purple_square, touching, b).\nis(purple_square, left, white_square).\nis(purple_square, near, white_square).\nis(green_square, on, purple_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(GreenObj, _, green, _, _), object(YellowObj, _, yellow, _, _), is(GreenObj, right, YellowObj).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "yes"
  },
  {
    "context": "There are two blocks called A and B. A is to the right of B. In A, there is a blue triangle, Which is above a orange rectangle, Which is above a black circle. The black circle is touching the bottom of A. In B there are four squares. A yellow square is above a white square and to the left of a green square. A large purple square is touching the bottom of B and is to the left and near of the white square. The green square is on top of the purple square.",
    "question": "Is the black thing to the left of all of the squares?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nobject(blue_triangle, unknown, blue, triangle, a).\nobject(orange_rectangle, unknown, orange, rectangle, a).\nobject(black_circle, unknown, black, circle, a).\nobject(yellow_square, unknown, yellow, square, b).\nobject(white_square, unknown, white, square, b).\nobject(green_square, unknown, green, square, b).\nobject(purple_square, large, purple, square, b).\nis(a, right, b).\nis(blue_triangle, above, orange_rectangle).\nis(orange_rectangle, above, black_circle).\nis(black_circle, touching, a).\nis(yellow_square, above, white_square).\nis(yellow_square, left, green_square).\nis(purple_square, touching, b).\nis(purple_square, left, white_square).\nis(purple_square, near, white_square).\nis(green_square, on, purple_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(BlackObj, _, _, black, _), is(BlackObj, left, Square) : object(Square, _, _, square, _).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['No']",
    "clean_asp": "block(a).\nblock(b).\nobject(blue_triangle, unknown, blue, triangle, a).\nobject(orange_rectangle, unknown, orange, rectangle, a).\nobject(black_circle, unknown, black, circle, a).\nobject(yellow_square, unknown, yellow, square, b).\nobject(white_square, unknown, white, square, b).\nobject(green_square, unknown, green, square, b).\nobject(purple_square, large, purple, square, b).\nis(a, right, b).\nis(blue_triangle, above, orange_rectangle).\nis(orange_rectangle, above, black_circle).\nis(black_circle, touching, a).\nis(yellow_square, above, white_square).\nis(yellow_square, left, green_square).\nis(purple_square, touching, b).\nis(purple_square, left, white_square).\nis(purple_square, near, white_square).\nis(green_square, on, purple_square).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(BlackObj, _, _, black, _), is(BlackObj, left, Square) : object(Square, _, _, square, _).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "no"
  },
  {
    "context": "There is a block called A. In A, there are four circles that are touching the bottom of A. The red circle is touching and to the left of the yellow circle. The pink circle is touching and to the right of the green circle. The yellow circle is touching and to the left of the green circle. Touching the bottom of A is a block called B. In B, there is a blue rectangle touching the top and the left of B. Near and to the right of the blue rectangle is a purple rectangle that is also touching the top of B. At the bottom of B there is a white triangle. Far to the left of B there is a block called C. In C, there is a brown oval that is to the right of an  orange square.",
    "question": "Is the red thing to the left of the pink thing?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(red_circle, unknown, red, circle, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(pink_circle, unknown, pink, circle, a).\nobject(green_circle, unknown, green, circle, a).\nobject(blue_rectangle, unknown, blue, rectangle, b).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(white_triangle, unknown, white, triangle, b).\nobject(brown_oval, unknown, brown, oval, c).\nobject(orange_square, unknown, orange, square, c).\nis(red_circle, touching, a).\nis(yellow_circle, touching, a).\nis(pink_circle, touching, a).\nis(green_circle, touching, a).\nis(blue_rectangle, touching, b).\nis(blue_rectangle, left, b).\nis(purple_rectangle, touching, b).\nis(purple_rectangle, near, blue_rectangle).\nis(white_triangle, touching, b).\nis(brown_oval, right, orange_square).\nis(brown_oval, in, c).\nis(orange_square, in, c).\nis(red_circle, left, yellow_circle).\nis(yellow_circle, left, green_circle).\nis(pink_circle, right, green_circle).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(Red, _, red, _, _), object(Pink, _, pink, _, _), is(Red, left, Pink).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['Yes']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(red_circle, unknown, red, circle, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(pink_circle, unknown, pink, circle, a).\nobject(green_circle, unknown, green, circle, a).\nobject(blue_rectangle, unknown, blue, rectangle, b).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(white_triangle, unknown, white, triangle, b).\nobject(brown_oval, unknown, brown, oval, c).\nobject(orange_square, unknown, orange, square, c).\nis(red_circle, touching, a).\nis(yellow_circle, touching, a).\nis(pink_circle, touching, a).\nis(green_circle, touching, a).\nis(blue_rectangle, touching, b).\nis(blue_rectangle, left, b).\nis(purple_rectangle, touching, b).\nis(purple_rectangle, near, blue_rectangle).\nis(white_triangle, touching, b).\nis(brown_oval, right, orange_square).\nis(brown_oval, in, c).\nis(orange_square, in, c).\nis(red_circle, left, yellow_circle).\nis(yellow_circle, left, green_circle).\nis(pink_circle, right, green_circle).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(Red, _, red, _, _), object(Pink, _, pink, _, _), is(Red, left, Pink).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "yes"
  },
  {
    "context": "There is a block called A. In A, there are four circles that are touching the bottom of A. The red circle is touching and to the left of the yellow circle. The pink circle is touching and to the right of the green circle. The yellow circle is touching and to the left of the green circle. Touching the bottom of A is a block called B. In B, there is a blue rectangle touching the top and the left of B. Near and to the right of the blue rectangle is a purple rectangle that is also touching the top of B. At the bottom of B there is a white triangle. Far to the left of B there is a block called C. In C, there is a brown oval that is to the right of an  orange square.",
    "question": "Is the white thing above the green thing",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(red_circle, unknown, red, circle, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(pink_circle, unknown, pink, circle, a).\nobject(green_circle, unknown, green, circle, a).\nobject(blue_rectangle, unknown, blue, rectangle, b).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(white_triangle, unknown, white, triangle, b).\nobject(brown_oval, unknown, brown, oval, c).\nobject(orange_square, unknown, orange, square, c).\nis(red_circle, touching, a).\nis(yellow_circle, touching, a).\nis(pink_circle, touching, a).\nis(green_circle, touching, a).\nis(red_circle, left, yellow_circle).\nis(yellow_circle, left, green_circle).\nis(pink_circle, right, green_circle).\nis(blue_rectangle, touching, b).\nis(blue_rectangle, left, b).\nis(purple_rectangle, touching, b).\nis(purple_rectangle, right, blue_rectangle).\nis(white_triangle, touching, b).\nis(brown_oval, right, orange_square).\nis(a, above, b).\nis(b, left, c).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(White, _, _, _, _), object(Green, _, _, _, _), is(White, above, Green).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['No']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(red_circle, unknown, red, circle, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(pink_circle, unknown, pink, circle, a).\nobject(green_circle, unknown, green, circle, a).\nobject(blue_rectangle, unknown, blue, rectangle, b).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(white_triangle, unknown, white, triangle, b).\nobject(brown_oval, unknown, brown, oval, c).\nobject(orange_square, unknown, orange, square, c).\nis(red_circle, touching, a).\nis(yellow_circle, touching, a).\nis(pink_circle, touching, a).\nis(green_circle, touching, a).\nis(red_circle, left, yellow_circle).\nis(yellow_circle, left, green_circle).\nis(pink_circle, right, green_circle).\nis(blue_rectangle, touching, b).\nis(blue_rectangle, left, b).\nis(purple_rectangle, touching, b).\nis(purple_rectangle, right, blue_rectangle).\nis(white_triangle, touching, b).\nis(brown_oval, right, orange_square).\nis(a, above, b).\nis(b, left, c).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(White, _, _, _, _), object(Green, _, _, _, _), is(White, above, Green).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "yes"
  },
  {
    "context": "There is a block called A. In A, there are four circles that are touching the bottom of A. The red circle is touching and to the left of the yellow circle. The pink circle is touching and to the right of the green circle. The yellow circle is touching and to the left of the green circle. Touching the bottom of A is a block called B. In B, there is a blue rectangle touching the top and the left of B. Near and to the right of the blue rectangle is a purple rectangle that is also touching the top of B. At the bottom of B there is a white triangle. Far to the left of B there is a block called C. In C, there is a brown oval that is to the right of an  orange square.",
    "question": "Is the blue object to the left of the purple thing?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(red_circle, unknown, red, circle, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(pink_circle, unknown, pink, circle, a).\nobject(green_circle, unknown, green, circle, a).\nobject(blue_rectangle, unknown, blue, rectangle, b).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(white_triangle, unknown, white, triangle, b).\nobject(brown_oval, unknown, brown, oval, c).\nobject(orange_square, unknown, orange, square, c).\nis(red_circle, touching, a).\nis(yellow_circle, touching, a).\nis(pink_circle, touching, a).\nis(green_circle, touching, a).\nis(red_circle, left, yellow_circle).\nis(yellow_circle, left, green_circle).\nis(pink_circle, right, green_circle).\nis(blue_rectangle, touching, b).\nis(blue_rectangle, left, b).\nis(purple_rectangle, touching, b).\nis(purple_rectangle, right, blue_rectangle).\nis(white_triangle, touching, b).\nis(brown_oval, right, orange_square).\nis(a, above, b).\nis(b, left, c).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(Blue, _, blue, _, _), object(Purple, _, purple, _, _), is(Blue, left, Purple).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['Yes']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(red_circle, unknown, red, circle, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(pink_circle, unknown, pink, circle, a).\nobject(green_circle, unknown, green, circle, a).\nobject(blue_rectangle, unknown, blue, rectangle, b).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(white_triangle, unknown, white, triangle, b).\nobject(brown_oval, unknown, brown, oval, c).\nobject(orange_square, unknown, orange, square, c).\nis(red_circle, touching, a).\nis(yellow_circle, touching, a).\nis(pink_circle, touching, a).\nis(green_circle, touching, a).\nis(red_circle, left, yellow_circle).\nis(yellow_circle, left, green_circle).\nis(pink_circle, right, green_circle).\nis(blue_rectangle, touching, b).\nis(blue_rectangle, left, b).\nis(purple_rectangle, touching, b).\nis(purple_rectangle, right, blue_rectangle).\nis(white_triangle, touching, b).\nis(brown_oval, right, orange_square).\nis(a, above, b).\nis(b, left, c).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(Blue, _, blue, _, _), object(Purple, _, purple, _, _), is(Blue, left, Purple).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "yes"
  },
  {
    "context": "There is a block called A. In A, there are four circles that are touching the bottom of A. The red circle is touching and to the left of the yellow circle. The pink circle is touching and to the right of the green circle. The yellow circle is touching and to the left of the green circle. Touching the bottom of A is a block called B. In B, there is a blue rectangle touching the top and the left of B. Near and to the right of the blue rectangle is a purple rectangle that is also touching the top of B. At the bottom of B there is a white triangle. Far to the left of B there is a block called C. In C, there is a brown oval that is to the right of an  orange square.",
    "question": "Is B near C?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(red_circle, unknown, red, circle, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(pink_circle, unknown, pink, circle, a).\nobject(green_circle, unknown, green, circle, a).\nobject(blue_rectangle, unknown, blue, rectangle, b).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(white_triangle, unknown, white, triangle, b).\nobject(brown_oval, unknown, brown, oval, c).\nobject(orange_square, unknown, orange, square, c).\nis(red_circle, touching, a).\nis(yellow_circle, touching, a).\nis(pink_circle, touching, a).\nis(green_circle, touching, a).\nis(blue_rectangle, touching, b).\nis(blue_rectangle, left, b).\nis(purple_rectangle, touching, b).\nis(purple_rectangle, near, blue_rectangle).\nis(white_triangle, touching, b).\nis(brown_oval, right, orange_square).\nis(brown_oval, in, c).\nis(orange_square, in, c).\nis(red_circle, left, yellow_circle).\nis(yellow_circle, left, green_circle).\nis(pink_circle, right, green_circle).\nis(b, touching, a).\nis(a, above, b).\nis(b, left, c).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- is(b, near, c).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['No']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(red_circle, unknown, red, circle, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(pink_circle, unknown, pink, circle, a).\nobject(green_circle, unknown, green, circle, a).\nobject(blue_rectangle, unknown, blue, rectangle, b).\nobject(purple_rectangle, unknown, purple, rectangle, b).\nobject(white_triangle, unknown, white, triangle, b).\nobject(brown_oval, unknown, brown, oval, c).\nobject(orange_square, unknown, orange, square, c).\nis(red_circle, touching, a).\nis(yellow_circle, touching, a).\nis(pink_circle, touching, a).\nis(green_circle, touching, a).\nis(blue_rectangle, touching, b).\nis(blue_rectangle, left, b).\nis(purple_rectangle, touching, b).\nis(purple_rectangle, near, blue_rectangle).\nis(white_triangle, touching, b).\nis(brown_oval, right, orange_square).\nis(brown_oval, in, c).\nis(orange_square, in, c).\nis(red_circle, left, yellow_circle).\nis(yellow_circle, left, green_circle).\nis(pink_circle, right, green_circle).\nis(b, touching, a).\nis(a, above, b).\nis(b, left, c).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- is(b, near, c).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "no"
  },
  {
    "context": "There is a block named A. In A, there is a pink triangle that touches the bottom of A. There is also a white triangle that touches the left edge of A, a red triangle that touches the top of A, and a green triangle that touches the right edge of A. Below A there is a block called B. In B, there is a small square, a large square, and a yellow circle. The large square is to the right of and near the yellow circle. The yellow circe is to the right of and above the small square. Below B there is a blocked named C. In C, there is a brown oval that is on top of a blue rectangle.",
    "question": "Is A above C?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(pink_triangle, unknown, pink, triangle, a).\nobject(white_triangle, unknown, white, triangle, a).\nobject(red_triangle, unknown, red, triangle, a).\nobject(green_triangle, unknown, green, triangle, a).\nobject(small_square, small, unknown, square, b).\nobject(large_square, large, unknown, square, b).\nobject(yellow_circle, unknown, yellow, circle, b).\nobject(brown_oval, unknown, brown, oval, c).\nobject(blue_rectangle, unknown, blue, rectangle, c).\nis(pink_triangle, touching, a).\nis(white_triangle, touching, a).\nis(red_triangle, touching, a).\nis(green_triangle, touching, a).\nis(large_square, right, yellow_circle).\nis(large_square, near, yellow_circle).\nis(yellow_circle, right, small_square).\nis(yellow_circle, above, small_square).\nis(brown_oval, above, blue_rectangle).\nis(a, above, b).\nis(b, above, c).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- is(a, above, c).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['Yes']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(pink_triangle, unknown, pink, triangle, a).\nobject(white_triangle, unknown, white, triangle, a).\nobject(red_triangle, unknown, red, triangle, a).\nobject(green_triangle, unknown, green, triangle, a).\nobject(small_square, small, unknown, square, b).\nobject(large_square, large, unknown, square, b).\nobject(yellow_circle, unknown, yellow, circle, b).\nobject(brown_oval, unknown, brown, oval, c).\nobject(blue_rectangle, unknown, blue, rectangle, c).\nis(pink_triangle, touching, a).\nis(white_triangle, touching, a).\nis(red_triangle, touching, a).\nis(green_triangle, touching, a).\nis(large_square, right, yellow_circle).\nis(large_square, near, yellow_circle).\nis(yellow_circle, right, small_square).\nis(yellow_circle, above, small_square).\nis(brown_oval, above, blue_rectangle).\nis(a, above, b).\nis(b, above, c).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- is(a, above, c).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "yes"
  },
  {
    "context": "There is a block named A. In A, there is a pink triangle that touches the bottom of A. There is also a white triangle that touches the left edge of A, a red triangle that touches the top of A, and a green triangle that touches the right edge of A. Below A there is a block called B. In B, there is a small square, a large square, and a yellow circle. The large square is to the right of and near the yellow circle. The yellow circe is to the right of and above the small square. Below B there is a blocked named C. In C, there is a brown oval that is on top of a blue rectangle.",
    "question": "Is the small thing to the left of the yellow thing?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(pink_triangle, unknown, pink, triangle, a).\nobject(white_triangle, unknown, white, triangle, a).\nobject(red_triangle, unknown, red, triangle, a).\nobject(green_triangle, unknown, green, triangle, a).\nobject(small_square, small, unknown, square, b).\nobject(large_square, large, unknown, square, b).\nobject(yellow_circle, unknown, yellow, circle, b).\nobject(brown_oval, unknown, brown, oval, c).\nobject(blue_rectangle, unknown, blue, rectangle, c).\nis(pink_triangle, touching, a).\nis(white_triangle, touching, a).\nis(red_triangle, touching, a).\nis(green_triangle, touching, a).\nis(large_square, right, yellow_circle).\nis(large_square, near, yellow_circle).\nis(yellow_circle, right, small_square).\nis(yellow_circle, above, small_square).\nis(brown_oval, above, blue_rectangle).\nis(a, above, b).\nis(b, above, c).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(SmallThing, small, _, _, _), object(YellowThing, _, yellow, _, _), is(SmallThing, left, YellowThing).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['Yes']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(pink_triangle, unknown, pink, triangle, a).\nobject(white_triangle, unknown, white, triangle, a).\nobject(red_triangle, unknown, red, triangle, a).\nobject(green_triangle, unknown, green, triangle, a).\nobject(small_square, small, unknown, square, b).\nobject(large_square, large, unknown, square, b).\nobject(yellow_circle, unknown, yellow, circle, b).\nobject(brown_oval, unknown, brown, oval, c).\nobject(blue_rectangle, unknown, blue, rectangle, c).\nis(pink_triangle, touching, a).\nis(white_triangle, touching, a).\nis(red_triangle, touching, a).\nis(green_triangle, touching, a).\nis(large_square, right, yellow_circle).\nis(large_square, near, yellow_circle).\nis(yellow_circle, right, small_square).\nis(yellow_circle, above, small_square).\nis(brown_oval, above, blue_rectangle).\nis(a, above, b).\nis(b, above, c).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(SmallThing, small, _, _, _), object(YellowThing, _, yellow, _, _), is(SmallThing, left, YellowThing).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "yes"
  },
  {
    "context": "There is a block named A. In A, there is a pink triangle that touches the bottom of A. There is also a white triangle that touches the left edge of A, a red triangle that touches the top of A, and a green triangle that touches the right edge of A. Below A there is a block called B. In B, there is a small square, a large square, and a yellow circle. The large square is to the right of and near the yellow circle. The yellow circe is to the right of and above the small square. Below B there is a blocked named C. In C, there is a brown oval that is on top of a blue rectangle.",
    "question": "Is the red object below the blue object?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(pink_triangle, unknown, pink, triangle, a).\nobject(white_triangle, unknown, white, triangle, a).\nobject(red_triangle, unknown, red, triangle, a).\nobject(green_triangle, unknown, green, triangle, a).\nobject(small_square, small, unknown, square, b).\nobject(large_square, large, unknown, square, b).\nobject(yellow_circle, unknown, yellow, circle, b).\nobject(brown_oval, unknown, brown, oval, c).\nobject(blue_rectangle, unknown, blue, rectangle, c).\nis(pink_triangle, touching, a).\nis(white_triangle, touching, a).\nis(red_triangle, touching, a).\nis(green_triangle, touching, a).\nis(large_square, right, yellow_circle).\nis(large_square, near, yellow_circle).\nis(yellow_circle, right, small_square).\nis(yellow_circle, above, small_square).\nis(brown_oval, above, blue_rectangle).\nis(a, above, b).\nis(b, above, c).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(RedObj, _, red, _, _), object(BlueObj, _, blue, _, _), is(RedObj, below, BlueObj).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['No']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(pink_triangle, unknown, pink, triangle, a).\nobject(white_triangle, unknown, white, triangle, a).\nobject(red_triangle, unknown, red, triangle, a).\nobject(green_triangle, unknown, green, triangle, a).\nobject(small_square, small, unknown, square, b).\nobject(large_square, large, unknown, square, b).\nobject(yellow_circle, unknown, yellow, circle, b).\nobject(brown_oval, unknown, brown, oval, c).\nobject(blue_rectangle, unknown, blue, rectangle, c).\nis(pink_triangle, touching, a).\nis(white_triangle, touching, a).\nis(red_triangle, touching, a).\nis(green_triangle, touching, a).\nis(large_square, right, yellow_circle).\nis(large_square, near, yellow_circle).\nis(yellow_circle, right, small_square).\nis(yellow_circle, above, small_square).\nis(brown_oval, above, blue_rectangle).\nis(a, above, b).\nis(b, above, c).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(RedObj, _, red, _, _), object(BlueObj, _, blue, _, _), is(RedObj, below, BlueObj).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "no"
  },
  {
    "context": "There is a block named A. In A, there is a pink triangle that touches the bottom of A. There is also a white triangle that touches the left edge of A, a red triangle that touches the top of A, and a green triangle that touches the right edge of A. Below A there is a block called B. In B, there is a small square, a large square, and a yellow circle. The large square is to the right of and near the yellow circle. The yellow circe is to the right of and above the small square. Below B there is a blocked named C. In C, there is a brown oval that is on top of a blue rectangle.",
    "question": "Is the yellow thing near the large thing?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(pink_triangle, unknown, pink, triangle, a).\nobject(white_triangle, unknown, white, triangle, a).\nobject(red_triangle, unknown, red, triangle, a).\nobject(green_triangle, unknown, green, triangle, a).\nobject(small_square, small, unknown, square, b).\nobject(large_square, large, unknown, square, b).\nobject(yellow_circle, unknown, yellow, circle, b).\nobject(brown_oval, unknown, brown, oval, c).\nobject(blue_rectangle, unknown, blue, rectangle, c).\nis(pink_triangle, touching, a).\nis(white_triangle, touching, a).\nis(red_triangle, touching, a).\nis(green_triangle, touching, a).\nis(large_square, right, yellow_circle).\nis(large_square, near, yellow_circle).\nis(yellow_circle, right, small_square).\nis(yellow_circle, above, small_square).\nis(brown_oval, above, blue_rectangle).\nis(a, above, b).\nis(b, above, c).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(YellowThing, _, yellow, _, _), object(LargeThing, large, _, _, _), is(YellowThing, near, LargeThing).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['Yes']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(pink_triangle, unknown, pink, triangle, a).\nobject(white_triangle, unknown, white, triangle, a).\nobject(red_triangle, unknown, red, triangle, a).\nobject(green_triangle, unknown, green, triangle, a).\nobject(small_square, small, unknown, square, b).\nobject(large_square, large, unknown, square, b).\nobject(yellow_circle, unknown, yellow, circle, b).\nobject(brown_oval, unknown, brown, oval, c).\nobject(blue_rectangle, unknown, blue, rectangle, c).\nis(pink_triangle, touching, a).\nis(white_triangle, touching, a).\nis(red_triangle, touching, a).\nis(green_triangle, touching, a).\nis(large_square, right, yellow_circle).\nis(large_square, near, yellow_circle).\nis(yellow_circle, right, small_square).\nis(yellow_circle, above, small_square).\nis(brown_oval, above, blue_rectangle).\nis(a, above, b).\nis(b, above, c).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(YellowThing, _, yellow, _, _), object(LargeThing, large, _, _, _), is(YellowThing, near, LargeThing).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "yes"
  },
  {
    "context": "There are three blocks names A, B, and C. A is to the left of B and B is to the left of C. In A, there is a small square Which is below and to the left of a yellow circle. In B, there is a yellow circle above and to the right of a large blue square. In C, there is a small black square that is below a small yellow triangle. Near and to the right of the square is a large black triangle. The large triangle is also to the left of and near a large blue square. Far above the blue square is a small yellow circle. The small triangle is to the left and far from the small circle.",
    "question": "Is the small black object in C near the small yellow thing in C?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(small_square, small, unknown, square, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(large_blue_square, large, blue, square, b).\nobject(yellow_circle_b, unknown, yellow, circle, b).\nobject(small_black_square, small, black, square, c).\nobject(small_yellow_triangle, small, yellow, triangle, c).\nobject(large_black_triangle, large, black, triangle, c).\nobject(large_blue_square_c, large, blue, square, c).\nobject(small_yellow_circle_c, small, yellow, circle, c).\nis(a, left, b).\nis(b, left, c).\nis(small_square, below, yellow_circle).\nis(small_square, left, yellow_circle).\nis(yellow_circle_b, above, large_blue_square).\nis(yellow_circle_b, right, large_blue_square).\nis(small_black_square, below, small_yellow_triangle).\nis(large_black_triangle, right, small_black_square).\nis(large_black_triangle, near, small_yellow_triangle).\nis(large_black_triangle, left, large_blue_square_c).\nis(small_yellow_triangle, left, small_yellow_circle_c).\nis(small_yellow_circle_c, far, small_yellow_triangle).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(small_black_square, small, black, _, c), object(small_yellow_triangle, small, yellow, _, c), is(small_black_square, near, small_yellow_triangle).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['No']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(small_square, small, unknown, square, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(large_blue_square, large, blue, square, b).\nobject(yellow_circle_b, unknown, yellow, circle, b).\nobject(small_black_square, small, black, square, c).\nobject(small_yellow_triangle, small, yellow, triangle, c).\nobject(large_black_triangle, large, black, triangle, c).\nobject(large_blue_square_c, large, blue, square, c).\nobject(small_yellow_circle_c, small, yellow, circle, c).\nis(a, left, b).\nis(b, left, c).\nis(small_square, below, yellow_circle).\nis(small_square, left, yellow_circle).\nis(yellow_circle_b, above, large_blue_square).\nis(yellow_circle_b, right, large_blue_square).\nis(small_black_square, below, small_yellow_triangle).\nis(large_black_triangle, right, small_black_square).\nis(large_black_triangle, near, small_yellow_triangle).\nis(large_black_triangle, left, large_blue_square_c).\nis(small_yellow_triangle, left, small_yellow_circle_c).\nis(small_yellow_circle_c, far, small_yellow_triangle).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(small_black_square, small, black, _, c), object(small_yellow_triangle, small, yellow, _, c), is(small_black_square, near, small_yellow_triangle).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "no"
  },
  {
    "context": "There are three blocks names A, B, and C. A is to the left of B and B is to the left of C. In A, there is a small square Which is below and to the left of a yellow circle. In B, there is a yellow circle above and to the right of a large blue square. In C, there is a small black square that is below a small yellow triangle. Near and to the right of the square is a large black triangle. The large triangle is also to the left of and near a large blue square. Far above the blue square is a small yellow circle. The small triangle is to the left and far from the small circle.",
    "question": "Is the yellow thing in A above a square?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(small_square, small, unknown, square, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(large_blue_square, large, blue, square, b).\nobject(yellow_circle_b, unknown, yellow, circle, b).\nobject(small_black_square, small, black, square, c).\nobject(small_yellow_triangle, small, yellow, triangle, c).\nobject(large_black_triangle, large, black, triangle, c).\nobject(large_blue_square_c, large, blue, square, c).\nobject(small_yellow_circle_c, small, yellow, circle, c).\nis(a, left, b).\nis(b, left, c).\nis(small_square, below, yellow_circle).\nis(small_square, left, yellow_circle).\nis(yellow_circle_b, above, large_blue_square).\nis(yellow_circle_b, right, large_blue_square).\nis(small_black_square, below, small_yellow_triangle).\nis(large_black_triangle, right, small_black_square).\nis(large_black_triangle, near, small_black_square).\nis(large_black_triangle, left, large_blue_square_c).\nis(large_black_triangle, near, large_blue_square_c).\nis(small_yellow_circle_c, far, small_yellow_triangle).\nis(small_yellow_circle_c, above, large_blue_square_c).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(YellowThing, _, yellow, _, a), object(Square, _, _, square, a), is(YellowThing, above, Square).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['Yes']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(small_square, small, unknown, square, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(large_blue_square, large, blue, square, b).\nobject(yellow_circle_b, unknown, yellow, circle, b).\nobject(small_black_square, small, black, square, c).\nobject(small_yellow_triangle, small, yellow, triangle, c).\nobject(large_black_triangle, large, black, triangle, c).\nobject(large_blue_square_c, large, blue, square, c).\nobject(small_yellow_circle_c, small, yellow, circle, c).\nis(a, left, b).\nis(b, left, c).\nis(small_square, below, yellow_circle).\nis(small_square, left, yellow_circle).\nis(yellow_circle_b, above, large_blue_square).\nis(yellow_circle_b, right, large_blue_square).\nis(small_black_square, below, small_yellow_triangle).\nis(large_black_triangle, right, small_black_square).\nis(large_black_triangle, near, small_black_square).\nis(large_black_triangle, left, large_blue_square_c).\nis(large_black_triangle, near, large_blue_square_c).\nis(small_yellow_circle_c, far, small_yellow_triangle).\nis(small_yellow_circle_c, above, large_blue_square_c).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(YellowThing, _, yellow, _, a), object(Square, _, _, square, a), is(YellowThing, above, Square).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "yes"
  },
  {
    "context": "There are three blocks names A, B, and C. A is to the left of B and B is to the left of C. In A, there is a small square Which is below and to the left of a yellow circle. In B, there is a yellow circle above and to the right of a large blue square. In C, there is a small black square that is below a small yellow triangle. Near and to the right of the square is a large black triangle. The large triangle is also to the left of and near a large blue square. Far above the blue square is a small yellow circle. The small triangle is to the left and far from the small circle.",
    "question": "Does B have any triangles?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(small_square, small, unknown, square, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(large_blue_square, large, blue, square, b).\nobject(yellow_circle_2, unknown, yellow, circle, b).\nobject(small_black_square, small, black, square, c).\nobject(small_yellow_triangle, small, yellow, triangle, c).\nobject(large_black_triangle, large, black, triangle, c).\nobject(large_blue_square_2, large, blue, square, c).\nobject(small_yellow_circle, small, yellow, circle, c).\nis(a, left, b).\nis(b, left, c).\nis(small_square, below, yellow_circle).\nis(small_square, left, yellow_circle).\nis(yellow_circle_2, above, large_blue_square).\nis(yellow_circle_2, right, large_blue_square).\nis(small_black_square, below, small_yellow_triangle).\nis(large_black_triangle, right, small_black_square).\nis(large_black_triangle, near, small_black_square).\nis(large_black_triangle, left, large_blue_square_2).\nis(large_black_triangle, near, large_blue_square_2).\nis(small_yellow_circle, far, small_yellow_triangle).\nis(small_yellow_circle, above, large_blue_square_2).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(_, _, _, triangle, b).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['Yes']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(small_square, small, unknown, square, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(large_blue_square, large, blue, square, b).\nobject(yellow_circle_2, unknown, yellow, circle, b).\nobject(small_black_square, small, black, square, c).\nobject(small_yellow_triangle, small, yellow, triangle, c).\nobject(large_black_triangle, large, black, triangle, c).\nobject(large_blue_square_2, large, blue, square, c).\nobject(small_yellow_circle, small, yellow, circle, c).\nis(a, left, b).\nis(b, left, c).\nis(small_square, below, yellow_circle).\nis(small_square, left, yellow_circle).\nis(yellow_circle_2, above, large_blue_square).\nis(yellow_circle_2, right, large_blue_square).\nis(small_black_square, below, small_yellow_triangle).\nis(large_black_triangle, right, small_black_square).\nis(large_black_triangle, near, small_black_square).\nis(large_black_triangle, left, large_blue_square_2).\nis(large_black_triangle, near, large_blue_square_2).\nis(small_yellow_circle, far, small_yellow_triangle).\nis(small_yellow_circle, above, large_blue_square_2).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(_, _, _, triangle, b).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "no"
  },
  {
    "context": "There are three blocks names A, B, and C. A is to the left of B and B is to the left of C. In A, there is a small square Which is below and to the left of a yellow circle. In B, there is a yellow circle above and to the right of a large blue square. In C, there is a small black square that is below a small yellow triangle. Near and to the right of the square is a large black triangle. The large triangle is also to the left of and near a large blue square. Far above the blue square is a small yellow circle. The small triangle is to the left and far from the small circle.",
    "question": "Is the small square in C to the left of the large square in C?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(small_square, small, unknown, square, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(large_blue_square, large, blue, square, b).\nobject(yellow_circle_2, unknown, yellow, circle, b).\nobject(small_black_square, small, black, square, c).\nobject(small_yellow_triangle, small, yellow, triangle, c).\nobject(large_black_triangle, large, black, triangle, c).\nobject(large_blue_square_2, large, blue, square, c).\nobject(small_yellow_circle, small, yellow, circle, c).\nis(a, left, b).\nis(b, left, c).\nis(small_square, below, yellow_circle).\nis(small_square, left, yellow_circle).\nis(yellow_circle_2, above, large_blue_square).\nis(yellow_circle_2, right, large_blue_square).\nis(small_black_square, below, small_yellow_triangle).\nis(large_black_triangle, right, small_black_square).\nis(large_black_triangle, near, small_black_square).\nis(large_black_triangle, left, large_blue_square_2).\nis(large_black_triangle, near, large_blue_square_2).\nis(small_yellow_circle, far, large_blue_square_2).\nis(small_yellow_triangle, left, small_yellow_circle).\nis(small_yellow_triangle, far, small_yellow_circle).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(small_square, _, _, _, c), object(large_blue_square_2, _, _, _, c), is(small_square, left, large_blue_square_2).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['Yes']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(small_square, small, unknown, square, a).\nobject(yellow_circle, unknown, yellow, circle, a).\nobject(large_blue_square, large, blue, square, b).\nobject(yellow_circle_2, unknown, yellow, circle, b).\nobject(small_black_square, small, black, square, c).\nobject(small_yellow_triangle, small, yellow, triangle, c).\nobject(large_black_triangle, large, black, triangle, c).\nobject(large_blue_square_2, large, blue, square, c).\nobject(small_yellow_circle, small, yellow, circle, c).\nis(a, left, b).\nis(b, left, c).\nis(small_square, below, yellow_circle).\nis(small_square, left, yellow_circle).\nis(yellow_circle_2, above, large_blue_square).\nis(yellow_circle_2, right, large_blue_square).\nis(small_black_square, below, small_yellow_triangle).\nis(large_black_triangle, right, small_black_square).\nis(large_black_triangle, near, small_black_square).\nis(large_black_triangle, left, large_blue_square_2).\nis(large_black_triangle, near, large_blue_square_2).\nis(small_yellow_circle, far, large_blue_square_2).\nis(small_yellow_triangle, left, small_yellow_circle).\nis(small_yellow_triangle, far, small_yellow_circle).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(small_square, _, _, _, c), object(large_blue_square_2, _, _, _, c), is(small_square, left, large_blue_square_2).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "no"
  },
  {
    "context": "There are three blocks named A, B, and C. B is to the right of A and C is to the right of B. In A there is a large black square that is touching left edge of A. In B, there is a large blue square Which is near and to the right of a large blue triangle. Far below the triangle there is a large yellow circle. The large yellow circle is touching the bottom of B. In C, there is a small blue circle that is to the right of a small black triangle.",
    "question": "Are the large blue things near each other?",
    "q_type": "YN",
    "choices": "['Yes', 'No', 'DK']",
    "predicted_ASP": "Here is the complete and refined ASP program:\n\n% Facts\nblock(a).\nblock(b).\nblock(c).\nobject(large_black_square, large, black, square, a).\nobject(large_blue_square, large, blue, square, b).\nobject(large_blue_triangle, large, blue, triangle, b).\nobject(large_yellow_circle, large, yellow, circle, b).\nobject(small_blue_circle, small, blue, circle, c).\nobject(small_black_triangle, small, black, triangle, c).\nis(large_black_square, touching, a).\nis(large_blue_square, near, large_blue_triangle).\nis(large_blue_square, right, large_blue_triangle).\nis(large_yellow_circle, far, large_blue_triangle).\nis(large_yellow_circle, touching, b).\nis(b, right, a).\nis(c, right, b).\nis(small_blue_circle, right, small_black_triangle).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(LargeBlue1, large, blue, _, _), object(LargeBlue2, large, blue, _, _), is(LargeBlue1, near, LargeBlue2).\nquery(no) :- not query(yes).\n#show query/1.",
    "actual_answer": "['Yes']",
    "clean_asp": "block(a).\nblock(b).\nblock(c).\nobject(large_black_square, large, black, square, a).\nobject(large_blue_square, large, blue, square, b).\nobject(large_blue_triangle, large, blue, triangle, b).\nobject(large_yellow_circle, large, yellow, circle, b).\nobject(small_blue_circle, small, blue, circle, c).\nobject(small_black_triangle, small, black, triangle, c).\nis(large_black_square, touching, a).\nis(large_blue_square, near, large_blue_triangle).\nis(large_blue_square, right, large_blue_triangle).\nis(large_yellow_circle, far, large_blue_triangle).\nis(large_yellow_circle, touching, b).\nis(b, right, a).\nis(c, right, b).\nis(small_blue_circle, right, small_black_triangle).\n\n% Rules\ninverse(left, right; right, left; front, behind; behind, front; above, below; below, above; near, far; far, near; in, contain; contain, in).\nis(Y, R2, X) :- is(X, R1, Y), inverse(R1, R2).\nsymmetric(near; far; touching; disconnected; overlapping; adjacent).\nis(Y, R, X) :- is(X, R, Y), symmetric(R).\ntransitive(above; below; left; right; front; behind; far; contain; in).\nis(X, R, Z) :- is(X, R, Y), is(Y, R, Z), transitive(R), X != Y, Y != Z, X != Z.\nis(O1, R, O2) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), is(B1, R, B2), O1 != O2.\nis(O1, R, O3) :- object(O1, _, _, _, B1), object(O2, _, _, _, B2), object(O3, _, _, _, B3), is(B1, R, B2), is(B2, R, B3), transitive(R), B1 != B2, B2 != B3, B1 != B3, O1 != O2, O2 != O3, O1 != O3.\n\n% Query\nquery(yes) :- object(LargeBlue1, large, blue, _, _), object(LargeBlue2, large, blue, _, _), is(LargeBlue1, near, LargeBlue2).\nquery(no) :- not query(yes).\n#show query/1.",
    "asp_result": "yes"
  }
]